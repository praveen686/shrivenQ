# Ultra-Strict Pre-Commit Configuration for ShrivenQuant
# Zero tolerance for code quality issues in ultra-low latency trading system

default_stages: [pre-commit, pre-push]
fail_fast: true
minimum_pre_commit_version: "3.0.0"

repos:
  # ============================================================================
  # BASIC FILE HYGIENE - Foundation Level Checks
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File format and encoding
      - id: check-yaml
        name: "üîç Validate YAML syntax"
        description: "Ensure all YAML files are valid"

      - id: check-toml
        name: "üîç Validate TOML syntax"
        description: "Ensure all TOML files are valid"

      - id: check-json
        name: "üîç Validate JSON syntax"
        description: "Ensure all JSON files are valid"

      # Security checks
      - id: check-added-large-files
        name: "üö´ Block large files"
        description: "Prevent committing large files (>1MB)"
        args: ['--maxkb=1024']

      - id: detect-private-key
        name: "üîí Detect private keys"
        description: "Prevent committing private keys"

      # Code hygiene
      - id: trailing-whitespace
        name: "‚úÇÔ∏è Remove trailing whitespace"
        description: "Clean trailing whitespace"
        args: [--markdown-linebreak-ext=md]

      - id: end-of-file-fixer
        name: "üìù Fix EOF newlines"
        description: "Ensure files end with newline"

      - id: mixed-line-ending
        name: "üìù Fix line endings"
        description: "Ensure consistent line endings"
        args: ['--fix=lf']

  # ============================================================================
  # CODE COMPLIANCE - MUST BE FIRST
  # ============================================================================
  - repo: local
    hooks:
      # Comprehensive compliance check
      - id: sq-compliance
        name: "ü§ñ ShrivenQuant Compliance Check"
        description: "Comprehensive code quality and compliance validation"
        entry: tools/sq-compliance-tools/sq-compliance/target/release/sq-compliance
        args: [., --no-build, --details]
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-commit]

  # ============================================================================
  # RUST CODE QUALITY - Core Language Checks
  # ============================================================================
  - repo: local
    hooks:
      # Rust formatting (must pass)
      - id: rust-fmt
        name: "üé® Rust Format Check"
        description: "Enforce consistent Rust formatting"
        entry: cargo
        args: [fmt, --all, --check]
        language: system
        files: \.rs$
        pass_filenames: false

      # Ultra-strict Clippy (trading system grade)
      - id: rust-clippy-strict
        name: "üî¨ Ultra-Strict Clippy Analysis"
        description: "Zero tolerance clippy checks for trading systems"
        entry: cargo
        args: [clippy, --all-targets, --all-features, --, -D, warnings, -D, "clippy::all", -D, "clippy::pedantic", -D, "clippy::nursery", -D, "clippy::cargo", -A, "clippy::multiple_crate_versions"]
        language: system
        files: \.rs$
        pass_filenames: false

      # Dead code detection
      - id: rust-dead-code
        name: "üíÄ Dead Code Detection"
        description: "Ensure no dead code in trading system"
        entry: bash
        args: [-c, 'RUSTFLAGS="-D dead_code -D unused -D unused_imports -D unused_variables -D unused_mut -D unreachable_code" cargo build --all-targets --all-features']
        language: system
        files: \.rs$
        pass_filenames: false

      # Security audit
      - id: rust-audit
        name: "üîí Security Audit"
        description: "Check for known security vulnerabilities"
        entry: cargo
        args: [audit]
        language: system
        files: \.rs$
        pass_filenames: false

      # Cargo.toml validation
      - id: cargo-check
        name: "üì¶ Cargo Check"
        description: "Validate all Cargo.toml files and dependencies"
        entry: cargo
        args: [check, --all-targets, --all-features]
        language: system
        files: \.rs$|Cargo\.toml$
        pass_filenames: false

  # ============================================================================
  # DOCUMENTATION QUALITY - Critical for Trading Systems
  # ============================================================================
  - repo: local
    hooks:
      # Documentation coverage
      - id: rust-doc-check
        name: "üìö Documentation Coverage"
        description: "Ensure all public APIs are documented"
        entry: bash
        args: [-c, 'RUSTDOCFLAGS="-D missing_docs -D rustdoc::broken_intra_doc_links" cargo doc --all-features --no-deps --document-private-items']
        language: system
        files: \.rs$
        pass_filenames: false

      # README and doc validation (disabled for now)
      # - id: markdown-link-check
      #   name: "üîó Markdown Link Validation"
      #   description: "Ensure all markdown links are valid"
      #   entry: bash
      #   args: [-c, 'find docs/ -name "*.md" -exec markdown-link-check {} \;']
      #   language: system
      #   files: \.md$
      #   pass_filenames: false

  # ============================================================================
  # PERFORMANCE REGRESSION PREVENTION - Critical for HFT
  # ============================================================================
  - repo: local
    hooks:
      # Benchmark regression check
      - id: performance-regression
        name: "‚ö° Performance Regression Check"
        description: "Ensure no performance regressions in critical paths"
        entry: bash
        args: [-c, './scripts/performance/validate-performance.sh']
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-commit]

      # Memory allocation detection in hot paths
      - id: no-allocations-hot-path
        name: "üß† Hot Path Allocation Check"
        description: "Ensure no allocations in performance-critical code"
        entry: bash
        args: [-c, './scripts/performance/check-hot-path-allocations.sh']
        language: system
        files: \.rs$
        pass_filenames: false

  # ============================================================================
  # TRADING SYSTEM SPECIFIC CHECKS
  # ============================================================================
  - repo: local
    hooks:
      # Configuration validation
      - id: config-validation
        name: "‚öôÔ∏è Configuration Validation"
        description: "Validate trading system configuration files"
        entry: bash
        args: [-c, './scripts/development/validate-configs.sh']
        language: system
        files: \.toml$|\.yaml$|\.json$
        pass_filenames: false

      # API compatibility check
      - id: api-compatibility
        name: "üîå API Compatibility Check"
        description: "Ensure API changes don't break compatibility"
        entry: bash
        args: [-c, './scripts/deployment/api-compatibility-check.sh']
        language: system
        files: \.rs$
        pass_filenames: false

      # Risk management validation
      - id: risk-limits-validation
        name: "‚ö†Ô∏è Risk Limits Validation"
        description: "Validate risk management parameters"
        entry: bash
        args: [-c, './scripts/compliance/validate-risk-limits.sh']
        language: system
        files: engine/src/risk\.rs|config/.*\.toml
        pass_filenames: false

  # ============================================================================
  # TESTING REQUIREMENTS - Mandatory for Financial Systems
  # ============================================================================
  - repo: local
    hooks:
      # Unit tests must pass
      - id: rust-test
        name: "üß™ Unit Tests"
        description: "All unit tests must pass"
        entry: bash
        args: [-c, './scripts/testing/validate-tests.sh']
        language: system
        files: \.rs$
        pass_filenames: false
        always_run: true  # Always run tests, even if no Rust files changed

      # Integration tests for critical components (disabled for now)
      # - id: integration-tests
      #   name: "üîÑ Integration Tests"
      #   description: "Critical integration tests must pass"
      #   entry: bash
      #   args: [-c, './scripts/run-integration-tests.sh']
      #   language: system
      #   files: \.rs$
      #   pass_filenames: false

      # Test coverage validation (disabled for now)
      # - id: test-coverage
      #   name: "üìä Test Coverage Check"
      #   description: "Maintain minimum test coverage"
      #   entry: bash
      #   args: [-c, './scripts/check-test-coverage.sh']
      #   language: system
      #   files: \.rs$
      #   pass_filenames: false

  # ============================================================================
  # COMMIT MESSAGE QUALITY - Important for Audit Trail
  # ============================================================================
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        name: "üí¨ Conventional Commits"
        description: "Ensure commit messages follow conventional format"
        stages: [commit-msg]
        args: [
          "feat", "fix", "docs", "style", "refactor",
          "perf", "test", "build", "ci", "chore", "revert"
        ]

  # ============================================================================
  # FINAL VALIDATION - System-wide Checks
  # ============================================================================
  - repo: local
    hooks:
      # Complete system validation
      - id: system-validation
        name: "üèÅ Final System Validation"
        description: "Complete system health check before commit"
        entry: bash
        args: [-c, './scripts/testing/system-validation.sh']
        language: system
        files: \.rs$|\.toml$|\.md$
        pass_filenames: false
        stages: [pre-push]

      # Performance benchmark baseline
      - id: benchmark-baseline
        name: "üìà Benchmark Baseline Update"
        description: "Update performance baselines if needed"
        entry: bash
        args: [-c, './scripts/performance/run-benchmarks.sh']
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [pre-push]
        always_run: true  # Always verify performance before push
