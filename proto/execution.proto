syntax = "proto3";

package shrivenquant.execution.v1;

// Execution service API
service ExecutionService {
  // Submit new order
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse);
  
  // Cancel order
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
  
  // Modify order
  rpc ModifyOrder(ModifyOrderRequest) returns (ModifyOrderResponse);
  
  // Get order status
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
  
  // Stream execution reports
  rpc StreamExecutionReports(StreamExecutionReportsRequest) returns (stream ExecutionReport);
  
  // Get execution metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

message SubmitOrderRequest {
  string client_order_id = 1;
  string symbol = 2;
  Side side = 3;
  int64 quantity = 4;        // Fixed-point
  OrderType order_type = 5;
  int64 limit_price = 6;     // Fixed-point (optional)
  int64 stop_price = 7;      // Fixed-point (optional)
  TimeInForce time_in_force = 8;
  string venue = 9;          // Optional: specific venue
  string strategy_id = 10;
  map<string, string> params = 11;
}

message SubmitOrderResponse {
  int64 order_id = 1;
  OrderStatus status = 2;
  string message = 3;
}

message CancelOrderRequest {
  int64 order_id = 1;
  string client_order_id = 2; // Alternative identifier
}

message CancelOrderResponse {
  bool success = 1;
  OrderStatus status = 2;
  string message = 3;
}

message ModifyOrderRequest {
  int64 order_id = 1;
  int64 new_quantity = 2;    // Fixed-point (optional)
  int64 new_price = 3;       // Fixed-point (optional)
}

message ModifyOrderResponse {
  bool success = 1;
  Order updated_order = 2;
  string message = 3;
}

message GetOrderRequest {
  int64 order_id = 1;
  string client_order_id = 2; // Alternative identifier
}

message GetOrderResponse {
  Order order = 1;
}

message Order {
  int64 order_id = 1;
  string client_order_id = 2;
  string exchange_order_id = 3;
  string symbol = 4;
  Side side = 5;
  int64 quantity = 6;         // Fixed-point
  int64 filled_quantity = 7;  // Fixed-point
  int64 avg_fill_price = 8;   // Fixed-point
  OrderStatus status = 9;
  OrderType order_type = 10;
  int64 limit_price = 11;     // Fixed-point
  int64 stop_price = 12;      // Fixed-point
  TimeInForce time_in_force = 13;
  string venue = 14;
  string strategy_id = 15;
  int64 created_at = 16;
  int64 updated_at = 17;
  repeated Fill fills = 18;
}

message Fill {
  string fill_id = 1;
  int64 quantity = 2;    // Fixed-point
  int64 price = 3;       // Fixed-point
  int64 timestamp = 4;
  bool is_maker = 5;
  int64 commission = 6;  // Fixed-point
  string commission_asset = 7;
}

message StreamExecutionReportsRequest {
  string strategy_id = 1;  // Optional: filter by strategy
}

message ExecutionReport {
  int64 order_id = 1;
  string client_order_id = 2;
  string exchange_order_id = 3;
  ReportType report_type = 4;
  OrderStatus status = 5;
  int64 filled_qty = 6;      // Fixed-point (cumulative)
  int64 last_qty = 7;        // Fixed-point
  int64 last_price = 8;      // Fixed-point
  int64 avg_price = 9;       // Fixed-point
  string reject_reason = 10;
  int64 timestamp = 11;
}

message GetMetricsRequest {}

message GetMetricsResponse {
  ExecutionMetrics metrics = 1;
}

message ExecutionMetrics {
  int64 total_orders = 1;
  int64 filled_orders = 2;
  int64 cancelled_orders = 3;
  int64 rejected_orders = 4;
  int64 avg_fill_time_ms = 5;
  int64 total_volume = 6;     // Fixed-point
  int64 total_commission = 7;  // Fixed-point
  int32 fill_rate = 8;        // Fixed-point percentage
  map<string, int64> venues_used = 9;
}

enum Side {
  SIDE_UNSPECIFIED = 0;
  SIDE_BUY = 1;
  SIDE_SELL = 2;
}

enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ORDER_TYPE_MARKET = 1;
  ORDER_TYPE_LIMIT = 2;
  ORDER_TYPE_STOP = 3;
  ORDER_TYPE_STOP_LIMIT = 4;
  ORDER_TYPE_ICEBERG = 5;
}

enum TimeInForce {
  TIME_IN_FORCE_UNSPECIFIED = 0;
  TIME_IN_FORCE_GTC = 1;  // Good till cancelled
  TIME_IN_FORCE_IOC = 2;  // Immediate or cancel
  TIME_IN_FORCE_FOK = 3;  // Fill or kill
  TIME_IN_FORCE_GTD = 4;  // Good till date
  TIME_IN_FORCE_DAY = 5;  // Day order
}

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_PENDING = 1;
  ORDER_STATUS_SENT = 2;
  ORDER_STATUS_ACKNOWLEDGED = 3;
  ORDER_STATUS_PARTIALLY_FILLED = 4;
  ORDER_STATUS_FILLED = 5;
  ORDER_STATUS_CANCELLED = 6;
  ORDER_STATUS_REJECTED = 7;
  ORDER_STATUS_EXPIRED = 8;
}

enum ReportType {
  REPORT_TYPE_UNSPECIFIED = 0;
  REPORT_TYPE_NEW = 1;
  REPORT_TYPE_FILL = 2;
  REPORT_TYPE_PARTIAL_FILL = 3;
  REPORT_TYPE_CANCELLED = 4;
  REPORT_TYPE_REPLACED = 5;
  REPORT_TYPE_REJECTED = 6;
  REPORT_TYPE_EXPIRED = 7;
  REPORT_TYPE_STATUS = 8;
}