syntax = "proto3";

package shrivenquant.secrets.v1;

// Secrets management service for secure credential storage
service SecretsService {
    // Store a credential securely
    rpc StoreCredential(StoreCredentialRequest) returns (StoreCredentialResponse);
    
    // Retrieve a credential
    rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse);
    
    // List all credential keys (not values)
    rpc ListKeys(ListKeysRequest) returns (ListKeysResponse);
    
    // Delete a credential
    rpc DeleteCredential(DeleteCredentialRequest) returns (DeleteCredentialResponse);
    
    // Rotate encryption keys
    rpc RotateKeys(RotateKeysRequest) returns (RotateKeysResponse);
    
    // Health check
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message StoreCredentialRequest {
    string key = 1;
    string value = 2;
    string service_name = 3;  // Which service is storing this
    map<string, string> metadata = 4;  // Additional metadata
}

message StoreCredentialResponse {
    bool success = 1;
    string message = 2;
}

message GetCredentialRequest {
    string key = 1;
    string service_name = 2;  // Which service is requesting
}

message GetCredentialResponse {
    string value = 1;
    bool found = 2;
    int64 last_updated = 3;
}

message ListKeysRequest {
    string service_filter = 1;  // Optional: filter by service
}

message ListKeysResponse {
    repeated string keys = 1;
}

message DeleteCredentialRequest {
    string key = 1;
    string service_name = 2;
}

message DeleteCredentialResponse {
    bool success = 1;
    string message = 2;
}

message RotateKeysRequest {
    bool force = 1;  // Force rotation even if not due
}

message RotateKeysResponse {
    bool success = 1;
    int32 keys_rotated = 2;
    string message = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {
    bool healthy = 1;
    string status = 2;
    int64 uptime_seconds = 3;
}