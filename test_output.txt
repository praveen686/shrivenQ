warning: unused import: `rustc_hash::FxHashMap`
  --> services/execution-router/src/smart_router.rs:20:5
   |
20 | use rustc_hash::FxHashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `execution-router` (lib) generated 1 warning (run `cargo fix --lib -p execution-router` to apply 1 suggestion)
   Compiling options-engine v0.1.0 (/home/praveen/ShrivenQuant/services/options-engine)
warning: unused variable: `alert_subscriber`
   --> services/reporting/tests/integration_test.rs:132:13
    |
132 |     let mut alert_subscriber = bus.subscribe("risk_alerts").await.unwrap();
    |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_alert_subscriber`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> services/reporting/tests/integration_test.rs:132:9
    |
132 |     let mut alert_subscriber = bus.subscribe("risk_alerts").await.unwrap();
    |         ----^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `performance_rx`
   --> services/reporting/tests/integration_test.rs:301:13
    |
301 |     let mut performance_rx = bus.subscribe("performance").await.unwrap();
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_performance_rx`

warning: variable does not need to be mutable
   --> services/reporting/tests/integration_test.rs:301:9
    |
301 |     let mut performance_rx = bus.subscribe("performance").await.unwrap();
    |         ----^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: struct `TestMessage` is never constructed
  --> services/reporting/tests/integration_test.rs:11:8
   |
11 | struct TestMessage {
   |        ^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

   Compiling orderbook v0.1.0 (/home/praveen/ShrivenQuant/services/orderbook)
warning: unused variable: `config`
   --> services/oms/src/lib.rs:683:13
    |
683 |         let config = OmsConfig {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `super::*`
   --> services/oms/tests/lib.rs:144:9
    |
144 |     use super::*;
    |         ^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused import: `chrono::Utc`
   --> services/oms/tests/lib.rs:145:9
    |
145 |     use chrono::Utc;
    |         ^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
   --> services/oms/tests/lib.rs:147:9
    |
147 |     use uuid::Uuid;
    |         ^^^^^^^^^^

warning: unused imports: `OrderStatus` and `Order`
   --> services/oms/tests/lib.rs:148:22
    |
148 |     use oms::order::{Order, OrderRequest, OrderSide, OrderStatus, OrderType, TimeInForce};
    |                      ^^^^^                           ^^^^^^^^^^^

warning: unused import: `crate::test_config::*`
   --> services/oms/tests/lib.rs:283:9
    |
283 |     use crate::test_config::*;
    |         ^^^^^^^^^^^^^^^^^^^^^

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> services/oms/tests/common/mod.rs:112:61
    |
112 |         execution_id: format!("EXEC-{}", chrono::Utc::now().timestamp_nanos()),
    |                                                             ^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unreachable pattern
   --> services/oms/tests/common/mod.rs:255:31
    |
252 |             OrderType::Limit | OrderType::StopLimit => {
    |                                -------------------- matches all the relevant values
...
255 |             OrderType::Stop | OrderType::StopLimit => {
    |                               ^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: `reporting` (test "integration_test") generated 5 warnings (run `cargo fix --test "integration_test"` to apply 2 suggestions)
warning: `oms` (lib test) generated 1 warning
warning: `oms` (test "lib") generated 7 warnings (run `cargo fix --test "lib"` to apply 5 suggestions)
   Compiling trading-gateway v0.1.0 (/home/praveen/ShrivenQuant/services/trading-gateway)
   Compiling backtesting v0.1.0 (/home/praveen/ShrivenQuant/services/backtesting)
warning: variable does not need to be mutable
   --> services/portfolio-manager/src/market_feed.rs:567:13
    |
567 |         let mut manager = MarketFeedManager::new(&symbols, 100);
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: `portfolio-manager` (lib test) generated 1 warning (run `cargo fix --lib -p portfolio-manager --tests` to apply 1 suggestion)
   Compiling api-gateway v0.1.0 (/home/praveen/ShrivenQuant/services/gateway)
warning: unused import: `assert_relative_eq`
   --> services/options-engine/tests/test_config.rs:134:38
    |
134 |     use approx::{assert_abs_diff_eq, assert_relative_eq};
    |                                      ^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

error: cannot find macro `json` in this scope
   --> services/gateway/tests/performance_tests.rs:303:28
    |
303 |             let response = json!({
    |                            ^^^^
    |
help: consider importing this macro
    |
6   + use serde_json::json;
    |

warning: unused variable: `description`
   --> services/options-engine/tests/test_config.rs:178:9
    |
178 |         description: &str
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_description`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `CheckOrderRequest`
  --> services/gateway/tests/performance_tests.rs:13:14
   |
13 |     models::{CheckOrderRequest, LoginRequest, SubmitOrderRequest},
   |              ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `auth_middleware` and `rate_limit_middleware`
   --> services/gateway/tests/performance_tests.rs:185:35
    |
185 |     use api_gateway::middleware::{auth_middleware, rate_limit_middleware};
    |                                   ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Response`, `StatusCode`, and `response::IntoResponse`
   --> services/gateway/tests/performance_tests.rs:188:25
    |
188 |         http::{Request, Response, StatusCode},
    |                         ^^^^^^^^  ^^^^^^^^^^
189 |         response::IntoResponse,
    |         ^^^^^^^^^^^^^^^^^^^^^^

error[E0382]: borrow of moved value: `index`
   --> services/options-engine/tests/test_config.rs:245:23
    |
233 |         index: IndexOption,
    |         ----- move occurs because `index` has type `options_engine::IndexOption`, which does not implement the `Copy` trait
...
241 |             index,
    |             ----- value moved here
...
245 |             lot_size: index.lot_size(),
    |                       ^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
241 |             index: index.clone(),
    |                  +++++++++++++++

For more information about this error, try `rustc --explain E0382`.
warning: `options-engine` (test "test_config") generated 2 warnings
error: could not compile `options-engine` (test "test_config") due to 1 previous error; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `toml`
  --> services/gateway/tests/performance_tests.rs:37:19
   |
37 |         b.iter(|| toml::from_str::<GatewayConfig>(criterion::black_box(config_content)))
   |                   ^^^^ use of unresolved module or unlinked crate `toml`
   |
   = help: if you wanted to use a crate named `toml`, use `cargo add toml` to add it to your `Cargo.toml`

error[E0560]: struct `api_gateway::models::SubmitOrderRequest` has no field named `exchange`
  --> services/gateway/tests/performance_tests.rs:55:9
   |
55 |         exchange: Some("NSE".to_string()),
   |         ^^^^^^^^ `api_gateway::models::SubmitOrderRequest` does not have this field
   |
   = note: available fields are: `venue`, `strategy_id`, `params`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `bincode`
  --> services/gateway/tests/performance_tests.rs:63:19
   |
63 |         b.iter(|| bincode::serialize(criterion::black_box(&order_request)))
   |                   ^^^^^^^ use of unresolved module or unlinked crate `bincode`
   |
   = help: if you wanted to use a crate named `bincode`, use `cargo add bincode` to add it to your `Cargo.toml`

error[E0560]: struct `RateLimitConfig` has no field named `per_ip_limit`
   --> services/gateway/tests/performance_tests.rs:119:13
    |
119 |             per_ip_limit: 1000,
    |             ^^^^^^^^^^^^ `RateLimitConfig` does not have this field
    |
    = note: available fields are: `endpoint_limits`

error[E0560]: struct `RateLimitConfig` has no field named `per_endpoint_limits`
   --> services/gateway/tests/performance_tests.rs:120:13
    |
120 |             per_endpoint_limits: HashMap::new(),
    |             ^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
120 -             per_endpoint_limits: HashMap::new(),
120 +             endpoint_limits: HashMap::new(),
    |

error[E0277]: `RateLimiter` is not a future
   --> services/gateway/tests/performance_tests.rs:123:34
    |
123 |         RateLimiter::new(config).await
    |         ------------------------ ^^^^^ `RateLimiter` is not a future
    |         |
    |         this call returns `RateLimiter`
    |
    = help: the trait `Future` is not implemented for `RateLimiter`
    = note: RateLimiter must be a future or must implement `IntoFuture` to be awaited
    = note: required for `RateLimiter` to implement `IntoFuture`
help: remove the `.await`
    |
123 -         RateLimiter::new(config).await
123 +         RateLimiter::new(config)
    |

error[E0404]: expected trait, found struct `axum::middleware::Next`
   --> services/gateway/tests/error_handling_tests.rs:656:6
    |
656 | impl axum::middleware::Next for MockNext {
    |      ^^^^^^^^^^^^^^^^^^^^^^ not a trait

warning: unused import: `json`
  --> services/gateway/tests/error_handling_tests.rs:13:18
   |
13 | use serde_json::{json, Value};
   |                  ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ApiResponse` and `ErrorResponse`
  --> services/gateway/tests/error_handling_tests.rs:23:9
   |
23 |         ApiResponse, CheckOrderRequest, ErrorResponse, LoginRequest, SubmitOrderRequest,
   |         ^^^^^^^^^^^                     ^^^^^^^^^^^^^

error[E0560]: struct `api_gateway::models::SubmitOrderRequest` has no field named `exchange`
   --> services/gateway/tests/stress_tests.rs:267:17
    |
267 |                 exchange: Some("NSE".to_string()),
    |                 ^^^^^^^^ `api_gateway::models::SubmitOrderRequest` does not have this field
    |
    = note: available fields are: `venue`, `strategy_id`, `params`

error[E0728]: `await` is only allowed inside `async` functions and blocks
  --> services/gateway/tests/error_handling_tests.rs:85:7
   |
78 | fn create_error_test_handlers() -> (AuthHandlers, ExecutionHandlers, RiskHandlers) {
   | ---------------------------------------------------------------------------------- this is not `async`
...
85 |     ).await.expect("Failed to create mock clients"));
   |       ^^^^^ only allowed inside `async` functions and blocks

error[E0560]: struct `RateLimitConfig` has no field named `per_ip_limit`
   --> services/gateway/tests/stress_tests.rs:316:9
    |
316 |         per_ip_limit: 100,
    |         ^^^^^^^^^^^^ `RateLimitConfig` does not have this field
    |
    = note: available fields are: `endpoint_limits`

error[E0560]: struct `RateLimitConfig` has no field named `per_endpoint_limits`
   --> services/gateway/tests/stress_tests.rs:317:9
    |
317 |         per_endpoint_limits: HashMap::new(),
    |         ^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
317 -         per_endpoint_limits: HashMap::new(),
317 +         endpoint_limits: HashMap::new(),
    |

error[E0277]: `RateLimiter` is not a future
   --> services/gateway/tests/stress_tests.rs:320:49
    |
320 |     let rate_limiter = RateLimiter::new(config).await;
    |                        ------------------------ ^^^^^ `RateLimiter` is not a future
    |                        |
    |                        this call returns `RateLimiter`
    |
    = help: the trait `Future` is not implemented for `RateLimiter`
    = note: RateLimiter must be a future or must implement `IntoFuture` to be awaited
    = note: required for `RateLimiter` to implement `IntoFuture`
help: remove the `.await`
    |
320 -     let rate_limiter = RateLimiter::new(config).await;
320 +     let rate_limiter = RateLimiter::new(config);
    |

Some errors have detailed explanations: E0404, E0728.
For more information about an error, try `rustc --explain E0404`.
warning: `api-gateway` (test "error_handling_tests") generated 2 warnings
error: could not compile `api-gateway` (test "error_handling_tests") due to 2 previous errors; 2 warnings emitted
error[E0432]: unresolved imports `orderbook::OperationType`, `orderbook::UpdateType`, `orderbook::EventBuilder`
  --> services/orderbook/tests/unit/test_integration.rs:15:25
   |
15 |     PerformanceMetrics, OperationType,
   |                         ^^^^^^^^^^^^^ no `OperationType` in the root
16 |     OrderBookEvent, OrderUpdate, TradeEvent, UpdateType, 
   |                                              ^^^^^^^^^^ no `UpdateType` in the root
17 |     Side as EventSide, EventBuilder
   |                        ^^^^^^^^^^^^ no `EventBuilder` in the root
   |
   = help: consider importing this enum instead:
           orderbook::metrics::OperationType
   = help: consider importing this enum instead:
           orderbook::events::UpdateType
   = note: enum `crate::unit::test_events::timestamp_and_latency_tests::UpdateType` exists but is inaccessible
   = help: consider importing this struct instead:
           orderbook::events::EventBuilder
   = note: struct `crate::unit::test_events::timestamp_and_latency_tests::EventBuilder` exists but is inaccessible

error: cannot find attribute `quickcheck` in this scope
   --> services/orderbook/tests/property/test_invariants.rs:447:7
    |
447 |     #[quickcheck]
    |       ^^^^^^^^^^
    |
note: `quickcheck` is imported here, but it is a function-like macro
   --> services/orderbook/tests/property/test_invariants.rs:445:9
    |
445 |     use super::*;
    |         ^^^^^^^^
help: consider importing this attribute macro
    |
445 +     use quickcheck_macros::quickcheck;
    |

error: cannot find attribute `quickcheck` in this scope
   --> services/orderbook/tests/property/test_invariants.rs:483:7
    |
483 |     #[quickcheck]
    |       ^^^^^^^^^^
    |
note: `quickcheck` is imported here, but it is a function-like macro
   --> services/orderbook/tests/property/test_invariants.rs:445:9
    |
445 |     use super::*;
    |         ^^^^^^^^
help: consider importing this attribute macro
    |
445 +     use quickcheck_macros::quickcheck;
    |

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> services/gateway/tests/stress_tests.rs:401:57
    |
401 |                         "timestamp": chrono::Utc::now().timestamp_nanos()
    |                                                         ^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error: cannot find attribute `quickcheck` in this scope
   --> services/orderbook/tests/property/test_invariants.rs:517:7
    |
517 |     #[quickcheck]
    |       ^^^^^^^^^^
    |
note: `quickcheck` is imported here, but it is a function-like macro
   --> services/orderbook/tests/property/test_invariants.rs:445:9
    |
445 |     use super::*;
    |         ^^^^^^^^
help: consider importing this attribute macro
    |
445 +     use quickcheck_macros::quickcheck;
    |

error[E0599]: no method named `to_async` found for mutable reference `&mut criterion::Bencher<'_>` in the current scope
   --> services/gateway/tests/performance_tests.rs:127:11
    |
127 |         b.to_async(&rt).iter(|| async {
    |           ^^^^^^^^ method not found in `&mut criterion::Bencher<'_>`

error[E0282]: type annotations needed
   --> services/gateway/tests/performance_tests.rs:111:9
    |
111 |     let rate_limiter = rt.block_on(async {
    |         ^^^^^^^^^^^^
...
129 |             limiter.check_rate_limit("127.0.0.1", "/test").await
    |                     ---------------- type must be known at this point
    |
help: consider giving `rate_limiter` an explicit type
    |
111 |     let rate_limiter: /* Type */ = rt.block_on(async {
    |                     ++++++++++++

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `toml`
   --> services/gateway/tests/stress_tests.rs:521:37
    |
521 |         let config: GatewayConfig = toml::from_str(config_content)?;
    |                                     ^^^^ use of unresolved module or unlinked crate `toml`
    |
    = help: if you wanted to use a crate named `toml`, use `cargo add toml` to add it to your `Cargo.toml`

warning: unused import: `ImbalanceMetrics`
  --> services/orderbook/tests/unit/test_analytics.rs:13:51
   |
13 |     MicrostructureAnalytics, ImbalanceCalculator, ImbalanceMetrics, ToxicityDetector
   |                                                   ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `LatencyStats`, `MetricsSnapshot`, and `OperationLatency`
  --> services/orderbook/tests/unit/test_metrics.rs:13:56
   |
13 |     PerformanceMetrics, LatencyTracker, OperationType, OperationLatency, 
   |                                                        ^^^^^^^^^^^^^^^^
14 |     LatencyStats, MetricsSnapshot
   |     ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `Ts`
  --> services/orderbook/tests/unit/test_metrics.rs:16:28
   |
16 | use services_common::{Qty, Ts};
   |                            ^^

warning: unused import: `ReplayStats`
  --> services/orderbook/tests/unit/test_replay.rs:14:86
   |
14 | use orderbook::replay::{ReplayEngine, ReplayConfig, SnapshotManager, LatencyTracker, ReplayStats};
   |                                                                                      ^^^^^^^^^^^

warning: unused imports: `OrderUpdate` and `TradeEvent`
  --> services/orderbook/tests/unit/test_integration.rs:16:21
   |
16 |     OrderBookEvent, OrderUpdate, TradeEvent, UpdateType, 
   |                     ^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `SystemTime` and `UNIX_EPOCH`
  --> services/orderbook/tests/lib.rs:41:21
   |
41 |     use std::time::{SystemTime, UNIX_EPOCH};
   |                     ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `Ts`
   --> services/orderbook/tests/lib.rs:134:36
    |
134 |     use services_common::{Px, Qty, Ts};
    |                                    ^^

warning: unused imports: `Px` and `Qty`
   --> services/orderbook/tests/lib.rs:251:27
    |
251 |     use services_common::{Px, Qty};
    |                           ^^  ^^^

error[E0308]: mismatched types
   --> services/gateway/tests/performance_tests.rs:260:13
    |
260 |             details
    |             ^^^^^^^ expected `HashMap<String, String, FxBuildHasher>`, found `HashMap<String, String>`
    |
    = note: expected struct `HashMap<_, _, rustc_hash::FxBuildHasher>`
               found struct `HashMap<_, _, RandomState>`

error[E0308]: mismatched types
   --> services/gateway/tests/stress_tests.rs:590:31
    |
590 |                 details: Some(details),
    |                          ---- ^^^^^^^ expected `HashMap<String, String, FxBuildHasher>`, found `HashMap<String, String>`
    |                          |
    |                          arguments to this enum variant are incorrect
    |
    = note: expected struct `HashMap<_, _, rustc_hash::FxBuildHasher>`
               found struct `HashMap<_, _, RandomState>`
help: the type constructed contains `HashMap<std::string::String, std::string::String>` due to the type of the argument passed
   --> services/gateway/tests/stress_tests.rs:590:26
    |
590 |                 details: Some(details),
    |                          ^^^^^-------^
    |                               |
    |                               this argument influences the type of `Some`
note: tuple variant defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^

warning: unused imports: `MarketEvent`, `MetricsSnapshot`, `OrderBookDelta`, `OrderBookEvent`, `OrderBookSnapshot`, `OrderUpdate`, and `TradeEvent`
  --> services/orderbook/src/main.rs:15:14
   |
15 |     events::{OrderBookEvent, OrderUpdate, TradeEvent, OrderBookSnapshot, OrderBookDelta, MarketEvent},
   |              ^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^
...
18 |     metrics::{PerformanceMetrics, MetricsSnapshot},
   |                                   ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
  --> services/orderbook/src/main.rs:25:27
   |
25 | use tracing::{info, warn, error, debug};
   |                           ^^^^^

error[E0282]: type annotations needed for `ApiResponse<_>`
   --> services/gateway/tests/stress_tests.rs:705:21
    |
705 |                 let response = ApiResponse::error(error);
    |                     ^^^^^^^^   ------------------------- type must be known at this point
    |
help: consider giving `response` an explicit type, where the type for type parameter `T` is specified
    |
705 |                 let response: ApiResponse<T> = ApiResponse::error(error);
    |                             ++++++++++++++++

warning: unused variable: `connection_id`
   --> services/gateway/tests/stress_tests.rs:179:9
    |
179 |     for connection_id in 0..config.concurrent_connections {
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `permit`
   --> services/gateway/tests/stress_tests.rs:187:17
    |
187 |             let permit = semaphore.acquire().await.unwrap();
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_permit`

error[E0599]: no method named `clone` found for struct `api_gateway::models::ErrorResponse` in the current scope
   --> services/gateway/tests/performance_tests.rs:265:74
    |
265 |         b.iter(|| ApiResponse::error(criterion::black_box(error_response.clone())))
    |                                                                          ^^^^^ method not found in `api_gateway::models::ErrorResponse`

error[E0404]: expected trait, found struct `Next`
  --> services/gateway/tests/unit/middleware.rs:71:6
   |
71 | impl Next for MockNext {
   |      ^^^^ not a trait

error[E0603]: function `is_public_endpoint` is private
   --> services/gateway/tests/unit/middleware.rs:21:9
    |
21  |         is_public_endpoint, get_client_ip, check_permission,
    |         ^^^^^^^^^^^^^^^^^^ private function
    |
note: the function `is_public_endpoint` is defined here
   --> /home/praveen/ShrivenQuant/services/gateway/src/middleware.rs:292:1
    |
292 | fn is_public_endpoint(path: &str) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: function `get_client_ip` is private
   --> services/gateway/tests/unit/middleware.rs:21:29
    |
21  |         is_public_endpoint, get_client_ip, check_permission,
    |                             ^^^^^^^^^^^^^ private function
    |
note: the function `get_client_ip` is defined here
   --> /home/praveen/ShrivenQuant/services/gateway/src/middleware.rs:305:1
    |
305 | fn get_client_ip(request: &Request) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio_test`
 --> services/gateway/tests/unit/auth_handlers.rs:6:5
  |
6 | use tokio_test;
  |     ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `LoginResponse`
  --> services/gateway/tests/unit/auth_handlers.rs:12:41
   |
12 |     models::{ApiResponse, LoginRequest, LoginResponse, RefreshTokenRequest},
   |                                         ^^^^^^^^^^^^^

warning: unused import: `http::HeaderMap`
 --> services/gateway/tests/unit/execution_handlers.rs:3:43
  |
3 | use axum::{extract::{Path, Query, State}, http::HeaderMap, response::Json};
  |                                           ^^^^^^^^^^^^^^^

warning: unused import: `tokio_test`
 --> services/gateway/tests/unit/execution_handlers.rs:6:5
  |
6 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused imports: `ApiResponse` and `execution`
  --> services/gateway/tests/unit/execution_handlers.rs:9:20
   |
9  |     grpc_clients::{execution, GrpcClients},
   |                    ^^^^^^^^^
10 |     handlers::{ExecutionHandlers, execution::OrderQuery},
11 |     models::{ApiResponse, CancelOrderRequest, SubmitOrderRequest},
   |              ^^^^^^^^^^^

warning: unused import: `tokio_test`
 --> services/gateway/tests/unit/risk_handlers.rs:6:5
  |
6 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused imports: `ApiResponse` and `risk`
  --> services/gateway/tests/unit/risk_handlers.rs:9:20
   |
9  |     grpc_clients::{risk, GrpcClients},
   |                    ^^^^
10 |     handlers::{RiskHandlers, risk::PositionsQuery},
11 |     models::{ApiResponse, CheckOrderRequest, KillSwitchRequest},
   |              ^^^^^^^^^^^

warning: unused import: `Uri`
 --> services/gateway/tests/unit/middleware.rs:5:56
  |
5 |     http::{HeaderMap, HeaderValue, Method, StatusCode, Uri},
  |                                                        ^^^

warning: unused imports: `ServiceExt` and `Service`
  --> services/gateway/tests/unit/middleware.rs:12:13
   |
12 | use tower::{Service, ServiceExt};
   |             ^^^^^^^  ^^^^^^^^^^

warning: unused import: `UserContext`
  --> services/gateway/tests/unit/middleware.rs:20:44
   |
20 |         AuthState, RateLimitState, Claims, UserContext,
   |                                            ^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> services/gateway/tests/unit/middleware.rs:306:9
    |
306 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RateLimitStats`
  --> services/gateway/tests/unit/rate_limiter.rs:10:33
   |
10 |     rate_limiter::{RateLimiter, RateLimitStats},
   |                                 ^^^^^^^^^^^^^^

warning: unused import: `Value`
 --> services/gateway/tests/unit/websocket.rs:4:24
  |
4 | use serde_json::{json, Value};
  |                        ^^^^^

warning: unused import: `tokio_test`
 --> services/gateway/tests/unit/websocket.rs:7:5
  |
7 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused import: `super::helpers::*`
  --> services/gateway/tests/unit/websocket.rs:15:5
   |
15 | use super::helpers::*;
   |     ^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0277, E0282, E0308, E0433, E0560.
For more information about an error, try `rustc --explain E0277`.
warning: unused imports: `CheckOrderResponse`, `KillSwitchResponse`, `RefreshTokenRequest`, and `SubmitOrderResponse`
  --> services/gateway/tests/unit/models.rs:8:62
   |
8  |     ApiResponse, ErrorResponse, LoginRequest, LoginResponse, RefreshTokenRequest,
   |                                                              ^^^^^^^^^^^^^^^^^^^
9  |     SubmitOrderRequest, SubmitOrderResponse, CancelOrderRequest, OrderStatusResponse,
   |                         ^^^^^^^^^^^^^^^^^^^
10 |     CheckOrderRequest, CheckOrderResponse, RiskMetrics, KillSwitchRequest, KillSwitchResponse,
   |                        ^^^^^^^^^^^^^^^^^^                                  ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> services/gateway/tests/unit/helpers.rs:7:5
  |
7 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `Request`
 --> services/gateway/tests/unit/helpers.rs:8:13
  |
8 | use tonic::{Request, Response, Status};
  |             ^^^^^^^

warning: unused import: `grpc_clients::GrpcClients`
  --> services/gateway/tests/unit/helpers.rs:12:5
   |
12 |     grpc_clients::GrpcClients,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> services/gateway/tests/lib.rs:9:5
  |
9 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> services/gateway/tests/lib.rs:95:9
   |
95 |     use std::sync::Arc;
   |         ^^^^^^^^^^^^^^

warning: unused import: `ErrorResponse`
   --> services/gateway/tests/lib.rs:222:44
    |
222 |     use api_gateway::models::{ApiResponse, ErrorResponse};
    |                                            ^^^^^^^^^^^^^

error[E0728]: `await` is only allowed inside `async` functions and blocks
  --> services/gateway/tests/unit/auth_handlers.rs:81:7
   |
73 | fn mock_grpc_clients() -> Arc<GrpcClients> {
   | ------------------------------------------ this is not `async`
...
81 |     ).await.unwrap())
   |       ^^^^^ only allowed inside `async` functions and blocks

error[E0728]: `await` is only allowed inside `async` functions and blocks
  --> services/gateway/tests/unit/execution_handlers.rs:24:7
   |
17 | fn mock_grpc_clients() -> Arc<GrpcClients> {
   | ------------------------------------------ this is not `async`
...
24 |     ).await.unwrap())
   |       ^^^^^ only allowed inside `async` functions and blocks

warning: `api-gateway` (test "stress_tests") generated 3 warnings
error: could not compile `api-gateway` (test "stress_tests") due to 7 previous errors; 3 warnings emitted
error[E0728]: `await` is only allowed inside `async` functions and blocks
  --> services/gateway/tests/unit/risk_handlers.rs:24:7
   |
17 | fn mock_grpc_clients() -> Arc<GrpcClients> {
   | ------------------------------------------ this is not `async`
...
24 |     ).await.unwrap())
   |       ^^^^^ only allowed inside `async` functions and blocks

error[E0599]: no method named `to_async` found for mutable reference `&mut criterion::Bencher<'_>` in the current scope
   --> services/gateway/tests/performance_tests.rs:287:11
    |
287 |         b.to_async(&rt).iter(|| async {
    |           ^^^^^^^^ method not found in `&mut criterion::Bencher<'_>`

warning: unused import: `tokio_test`
 --> services/backtesting/tests/unit/engine_tests.rs:4:5
  |
4 | use tokio_test;
  |     ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Duration`
 --> services/backtesting/tests/unit/execution_tests.rs:5:19
  |
5 | use chrono::{Utc, Duration};
  |                   ^^^^^^^^

warning: unused imports: `Duration` and `Utc`
 --> services/backtesting/tests/unit/strategy_tests.rs:5:14
  |
5 | use chrono::{Utc, Duration};
  |              ^^^  ^^^^^^^^

error[E0560]: struct `api_gateway::models::SubmitOrderRequest` has no field named `exchange`
   --> services/gateway/tests/performance_tests.rs:348:17
    |
348 |                 exchange: None,
    |                 ^^^^^^^^ `api_gateway::models::SubmitOrderRequest` does not have this field
    |
    = note: available fields are: `venue`, `strategy_id`, `params`

warning: unused import: `tokio_test`
 --> services/backtesting/tests/integration/end_to_end_tests.rs:4:5
  |
4 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused import: `tokio_test`
 --> services/backtesting/tests/integration/strategy_integration_tests.rs:4:5
  |
4 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused imports: `Duration` and `Utc`
 --> services/backtesting/tests/integration/strategy_integration_tests.rs:8:14
  |
8 | use chrono::{Utc, Duration};
  |              ^^^  ^^^^^^^^

warning: unused import: `tokio_test`
 --> services/backtesting/tests/integration/performance_integration_tests.rs:4:5
  |
4 | use tokio_test;
  |     ^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> services/backtesting/tests/integration/performance_integration_tests.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

error[E0728]: `await` is only allowed inside `async` functions and blocks
  --> services/gateway/tests/unit/websocket.rs:25:7
   |
18 | fn mock_grpc_clients() -> Arc<GrpcClients> {
   | ------------------------------------------ this is not `async`
...
25 |     ).await.unwrap())
   |       ^^^^^ only allowed inside `async` functions and blocks

error[E0560]: struct `api_gateway::models::SubmitOrderRequest` has no field named `exchange`
   --> services/gateway/tests/performance_tests.rs:383:25
    |
383 |                         exchange: Some("NSE".to_string()),
    |                         ^^^^^^^^ `api_gateway::models::SubmitOrderRequest` does not have this field
    |
    = note: available fields are: `venue`, `strategy_id`, `params`

error[E0308]: mismatched types
   --> services/orderbook/tests/unit/test_analytics.rs:157:32
    |
157 |                 Ts::from_nanos(1_000_000_000 * i) // 1 second apart
    |                 -------------- ^^^^^^^^^^^^^^^^^ expected `u64`, found `i64`
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:264:18
    |
264 |     pub const fn from_nanos(nanos: u64) -> Self {
    |                  ^^^^^^^^^^
help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit
    |
157 |                 Ts::from_nanos((1_000_000_000 * i).try_into().unwrap()) // 1 second apart
    |                                +                 +++++++++++++++++++++

error[E0308]: mismatched types
   --> services/orderbook/tests/unit/test_analytics.rs:227:32
    |
227 |                 Ts::from_nanos(1_000_000_000 * i)
    |                 -------------- ^^^^^^^^^^^^^^^^^ expected `u64`, found `i64`
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:264:18
    |
264 |     pub const fn from_nanos(nanos: u64) -> Self {
    |                  ^^^^^^^^^^
help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit
    |
227 |                 Ts::from_nanos((1_000_000_000 * i).try_into().unwrap())
    |                                +                 +++++++++++++++++++++

warning: unused variable: `rt`
   --> services/gateway/tests/performance_tests.rs:192:9
    |
192 |     let rt = Runtime::new().unwrap();
    |         ^^ help: if this is intentional, prefix it with an underscore: `_rt`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `has_position`
   --> services/backtesting/tests/unit/engine_tests.rs:155:9
    |
155 |     let has_position = backtest_result.final_portfolio.positions
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_has_position`
    |
    = note: `#[warn(unused_variables)]` on by default

Some errors have detailed explanations: E0277, E0282, E0308, E0433, E0560, E0599.
Some errors have detailed explanations: E0404, E0603, E0728.
error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
  --> services/orderbook/tests/unit/test_events.rs:93:25
   |
93 |             side: Side::Bid,
   |                         ^^^ variant or associated item not found in `orderbook::events::Side`

warning: `api-gateway` (test "performance_tests") generated 4 warnings
error: could not compile `api-gateway` (test "performance_tests") due to 14 previous errors; 4 warnings emitted
warning: `api-gateway` (test "lib") generated 22 warnings
error: could not compile `api-gateway` (test "lib") due to 7 previous errors; 22 warnings emitted
error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
  --> services/orderbook/tests/unit/test_events.rs:99:38
   |
99 |         assert_eq!(level.side, Side::Bid);
   |                                      ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:105:118
    |
105 |             LevelUpdate { price: Px::from_i64(100_000), quantity: Qty::from_i64(10_000), order_count: 2, side: Side::Bid },
    |                                                                                                                      ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0382]: use of moved value: `frequency`
   --> services/backtesting/tests/unit/engine_tests.rs:224:26
    |
216 |     for frequency in [DataFrequency::Daily, DataFrequency::Hour, DataFrequency::Minute] {
    |         --------- move occurs because `frequency` has type `backtesting::DataFrequency`, which does not implement the `Copy` trait
217 |         let mut config = TestConfigFactory::basic_config();
218 |         config.data_frequency = frequency;
    |                                 --------- value moved here
...
224 |         let data = match frequency {
    |                          ^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
218 |         config.data_frequency = frequency.clone();
    |                                          ++++++++

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:106:117
    |
106 |             LevelUpdate { price: Px::from_i64(99_000), quantity: Qty::from_i64(15_000), order_count: 3, side: Side::Bid },
    |                                                                                                                     ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0659]: `trading_gateway` is ambiguous
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:17:5
   |
17 | use trading_gateway::{
   |     ^^^^^^^^^^^^^^^ ambiguous name
   |
   = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution
   = note: `trading_gateway` could refer to a crate passed with `--extern`
   = help: use `::trading_gateway` to refer to this crate unambiguously
note: `trading_gateway` could also refer to the struct defined here
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:76:1
   |
76 | #[fixture]
   | ^^^^^^^^^^
   = help: use `self::trading_gateway` to refer to this struct unambiguously
   = note: this error originates in the attribute macro `fixture` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0382]: borrow of moved value: `slippage_model`
   --> services/backtesting/tests/unit/engine_tests.rs:344:79
    |
329 | async fn test_different_slippage_models(#[case] slippage_model: SlippageModel) {
    |                                                 -------------- move occurs because `slippage_model` has type `backtesting::SlippageModel`, which does not implement the `Copy` trait
...
332 |     config.slippage_model = slippage_model;
    |                             -------------- value moved here
...
344 |     assert!(result.is_ok(), "Backtest should work with slippage model: {:?}", slippage_model);
    |                                                                               ^^^^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
332 |     config.slippage_model = slippage_model.clone();
    |                                           ++++++++

warning: unused imports: `OrderStatus`, `RiskAction`, and `Severity`
  --> services/trading-gateway/tests/integration_test.rs:12:17
   |
12 |     SignalType, OrderStatus, Severity, RiskAction,
   |                 ^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `OrderState`
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:18:41
   |
18 |     execution_engine::{ExecutionEngine, OrderState},
   |                                         ^^^^^^^^^^

warning: unused import: `Qty`
  --> services/trading-gateway/tests/unit/signal_aggregator_tests.rs:19:23
   |
19 | use services_common::{Qty, Symbol, Ts};
   |                       ^^^

warning: unused import: `PositionInfo`
  --> services/trading-gateway/tests/unit/position_manager_tests.rs:17:24
   |
17 |     position_manager::{PositionInfo, PositionManager},
   |                        ^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:134:117
    |
134 |             LevelUpdate { price: Px::from_i64(100_000), quantity: Qty::from_i64(5_000), order_count: 1, side: Side::Bid },
    |                                                                                                                     ^^^ variant or associated item not found in `orderbook::events::Side`

warning: unused import: `ComponentHealth`
  --> services/trading-gateway/tests/unit/market_maker_tests.rs:19:5
   |
19 |     ComponentHealth, OrderType, Side, TradingEvent, TradingStrategy,
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> services/trading-gateway/tests/unit/strategy_tests.rs:15:5
   |
15 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::time::sleep`
  --> services/trading-gateway/tests/unit/strategy_tests.rs:16:5
   |
16 | use tokio::time::sleep;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `Request`
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:16:13
   |
16 | use tonic::{Request, Status};
   |             ^^^^^^^

warning: unused imports: `OrderStatus`, `OrderType`, `SignalType`, and `TradingEvent`
  --> services/trading-gateway/tests/integration/end_to_end_tests.rs:21:35
   |
21 |     GatewayConfig, GatewayStatus, OrderStatus, OrderType, Side, SignalType, TradingEvent,
   |                                   ^^^^^^^^^^^  ^^^^^^^^^        ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unnecessary parentheses around assigned value
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:154:34
    |
154 |             let price_movement = (round as i64 * (i as i64 + 1) * 1000);
    |                                  ^                                    ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
154 -             let price_movement = (round as i64 * (i as i64 + 1) * 1000);
154 +             let price_movement = round as i64 * (i as i64 + 1) * 1000;
    |

warning: unused variable: `has_tech_position`
   --> services/backtesting/tests/integration/end_to_end_tests.rs:136:9
    |
136 |     let has_tech_position = result.final_portfolio.positions
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_has_tech_position`

warning: unused variable: `total_activity`
   --> services/backtesting/tests/integration/end_to_end_tests.rs:230:9
    |
230 |     let total_activity = result.trades.len() + result.final_portfolio.positions.len();
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_activity`

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:404:73
    |
404 |         let update = create_test_order_update(789, 99_000, 7_500, Side::Bid, UpdateType::Modify);
    |                                                                         ^^^ variant or associated item not found in `orderbook::events::Side`

warning: unused variable: `run`
   --> services/backtesting/tests/integration/end_to_end_tests.rs:296:9
    |
296 |     for run in 0..3 {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_run`

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:414:56
    |
414 |             assert_eq!(deserialized_update.side, Side::Bid);
    |                                                        ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0599]: no variant or associated item named `Ask` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:423:74
    |
423 |         let update = create_test_order_update(321, 98_000, 12_500, Side::Ask, UpdateType::Delete);
    |                                                                          ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0599]: no variant or associated item named `Bid` found for enum `orderbook::events::Side` in the current scope
   --> services/orderbook/tests/unit/test_events.rs:440:122
    |
440 |                 LevelUpdate { price: Px::from_i64(100_000), quantity: Qty::from_i64(10_000), order_count: 2, side: Side::Bid },
    |                                                                                                                          ^^^ variant or associated item not found in `orderbook::events::Side`

error[E0433]: failed to resolve: use of undeclared type `MAStrategy`
  --> services/backtesting/tests/integration/strategy_integration_tests.rs:24:20
   |
24 |     let strategy = MAStrategy::new("MA_TREND".to_string(), 5, 20);
   |                    ^^^^^^^^^^
   |                    |
   |                    use of undeclared type `MAStrategy`
   |                    help: a trait with a similar name exists: `Strategy`

error[E0433]: failed to resolve: use of undeclared type `MAStrategy`
  --> services/backtesting/tests/integration/strategy_integration_tests.rs:53:20
   |
53 |     let strategy = MAStrategy::new("MA_SIDEWAYS".to_string(), 10, 30);
   |                    ^^^^^^^^^^
   |                    |
   |                    use of undeclared type `MAStrategy`
   |                    help: a trait with a similar name exists: `Strategy`

error[E0433]: failed to resolve: use of undeclared type `MAStrategy`
  --> services/backtesting/tests/integration/strategy_integration_tests.rs:82:24
   |
82 |         let strategy = MAStrategy::new("MA_PARAMS".to_string(), fast, slow);
   |                        ^^^^^^^^^^
   |                        |
   |                        use of undeclared type `MAStrategy`
   |                        help: a trait with a similar name exists: `Strategy`

error[E0433]: failed to resolve: use of undeclared type `MAStrategy`
   --> services/backtesting/tests/integration/strategy_integration_tests.rs:135:20
    |
135 |     let strategy = MAStrategy::new("LIMITED".to_string(), 5, 20);
    |                    ^^^^^^^^^^
    |                    |
    |                    use of undeclared type `MAStrategy`
    |                    help: a trait with a similar name exists: `Strategy`

error[E0599]: no variant or associated item named `Buy` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:159:47
    |
159 |             if is_aggressive_buy { EventSide::Buy } else { EventSide::Sell }
    |                                               ^^^ variant or associated item not found in `orderbook::Side`

error[E0599]: no variant or associated item named `Sell` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:159:71
    |
159 |             if is_aggressive_buy { EventSide::Buy } else { EventSide::Sell }
    |                                                                       ^^^^ variant or associated item not found in `orderbook::Side`

error[E0061]: this function takes 0 arguments but 1 argument was supplied
   --> services/orderbook/src/main.rs:404:28
    |
404 |         let mut detector = ToxicityDetector::new(threshold);
    |                            ^^^^^^^^^^^^^^^^^^^^^ --------- unexpected argument of type `f64`
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/orderbook/src/analytics.rs:424:24
    |
424 |     #[must_use] pub fn new() -> Self {
    |                        ^^^
help: remove the extra argument
    |
404 -         let mut detector = ToxicityDetector::new(threshold);
404 +         let mut detector = ToxicityDetector::new();
    |

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:96:5
    |
96  |     assert_eq!(order.order_type, OrderType::Market);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderType
    |     trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderStatus`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:99:5
    |
99  |     assert_eq!(order.status, OrderStatus::Accepted);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderStatus
    |     trading_gateway::OrderStatus
    |
note: the foreign item type `trading_gateway::OrderStatus` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:184:1
    |
184 | pub enum OrderStatus {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:119:5
    |
119 |     assert_eq!(order.order_type, OrderType::Limit);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderType
    |     trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderStatus`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:121:5
    |
121 |     assert_eq!(order.status, OrderStatus::Accepted);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderStatus
    |     trading_gateway::OrderStatus
    |
note: the foreign item type `trading_gateway::OrderStatus` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:184:1
    |
184 | pub enum OrderStatus {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:146:5
    |
146 |     assert_eq!(order.order_type, OrderType::Twap);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderType
    |     trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:173:5
    |
173 |     assert_eq!(order.order_type, OrderType::Vwap);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderType
    |     trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: arguments to this method are incorrect
   --> services/orderbook/tests/unit/test_integration.rs:192:18
    |
192 |         scenario.simulate_trade_execution(100 + i, price, quantity, is_buy)?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^          -----  -------- expected `i64`, found `u64`
    |                                                    |
    |                                                    expected `i64`, found `u64`
    |
note: method defined here
   --> services/orderbook/tests/unit/test_integration.rs:127:8
    |
127 |     fn simulate_trade_execution(&self, 
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
128 |         trade_id: u64, 
129 |         price: i64, 
    |         ----------
130 |         quantity: i64,
    |         -------------
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
192 |         scenario.simulate_trade_execution(100 + i, price.try_into().unwrap(), quantity, is_buy)?;
    |                                                         ++++++++++++++++++++
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
192 |         scenario.simulate_trade_execution(100 + i, price, quantity.try_into().unwrap(), is_buy)?;
    |                                                                   ++++++++++++++++++++

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderStatus`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:200:5
    |
200 |     assert_eq!(order.status, OrderStatus::Cancelled);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderStatus
    |     trading_gateway::OrderStatus
    |
note: the foreign item type `trading_gateway::OrderStatus` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:184:1
    |
184 | pub enum OrderStatus {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `calculate_metrics` found for struct `Arc<MicrostructureAnalytics>` in the current scope
   --> services/orderbook/src/main.rs:449:38
    |
449 |         let metrics = self.analytics.calculate_metrics(book);
    |                                      ^^^^^^^^^^^^^^^^^ method not found in `Arc<MicrostructureAnalytics>`

error[E0308]: arguments to this method are incorrect
   --> services/orderbook/tests/unit/test_integration.rs:315:18
    |
315 |         scenario.simulate_order_lifecycle(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^
316 |             i, 
317 |             100_000 + (i % 10 - 5) * 50,
    |             --------------------------- expected `i64`, found `u64`
318 |             1000 + (i % 3) * 500,
    |             -------------------- expected `i64`, found `u64`
    |
note: method defined here
   --> services/orderbook/tests/unit/test_integration.rs:55:8
    |
55  |     fn simulate_order_lifecycle(&self, 
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
56  |         order_id: u64, 
57  |         price: i64, 
    |         ----------
58  |         quantity: i64, 
    |         -------------
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
317 |             (100_000 + (i % 10 - 5) * 50).try_into().unwrap(),
    |             +                           +++++++++++++++++++++
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
318 |             (1000 + (i % 3) * 500).try_into().unwrap(),
    |             +                    +++++++++++++++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:365:37
    |
365 |             quantity: Qty::from_i64(i * 10000),
    |                       ------------- ^^^^^^^^^ expected `i64`, found `u64`
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
365 |             quantity: Qty::from_i64((i * 10000).try_into().unwrap()),
    |                                     +         +++++++++++++++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:403:32
    |
403 |                 symbol: Symbol(i),
    |                         ------ ^ expected `u32`, found `u64`
    |                         |
    |                         arguments to this struct are incorrect
    |
note: tuple struct defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:11:12
    |
11  | pub struct Symbol(pub u32);
    |            ^^^^^^
help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit
    |
403 |                 symbol: Symbol(i.try_into().unwrap()),
    |                                 ++++++++++++++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:406:41
    |
406 |                 quantity: Qty::from_i64(i * 1000),
    |                           ------------- ^^^^^^^^ expected `i64`, found `u64`
    |                           |
    |                           arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
406 |                 quantity: Qty::from_i64((i * 1000).try_into().unwrap()),
    |                                         +        +++++++++++++++++++++

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:566:5
    |
566 |     assert_eq!(state.order_type, order_type);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderType
    |     trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderStatus`
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:569:5
    |
569 |     assert_eq!(state.status, OrderStatus::Accepted);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     trading_gateway::OrderStatus
    |     trading_gateway::OrderStatus
    |
note: the foreign item type `trading_gateway::OrderStatus` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:184:1
    |
184 | pub enum OrderStatus {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/signal_aggregator_tests.rs:120:9
    |
120 |         assert_eq!(order_type, OrderType::Market);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         trading_gateway::OrderType
    |         trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::TimeInForce`
   --> services/trading-gateway/tests/unit/signal_aggregator_tests.rs:122:9
    |
122 |         assert_eq!(time_in_force, TimeInForce::Ioc);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         trading_gateway::TimeInForce
    |         trading_gateway::TimeInForce
    |
note: the foreign item type `trading_gateway::TimeInForce` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:171:1
    |
171 | pub enum TimeInForce {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: arguments to this method are incorrect
   --> services/orderbook/tests/unit/test_integration.rs:328:18
    |
328 |         scenario.simulate_trade_execution(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^
329 |             i,
330 |             99_000 - (i - 100) * 10, // Falling prices
    |             ----------------------- expected `i64`, found `u64`
331 |             2000 + (i % 5) * 1000,
    |             --------------------- expected `i64`, found `u64`
    |
note: method defined here
   --> services/orderbook/tests/unit/test_integration.rs:127:8
    |
127 |     fn simulate_trade_execution(&self, 
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
128 |         trade_id: u64, 
129 |         price: i64, 
    |         ----------
130 |         quantity: i64,
    |         -------------
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
330 |             (99_000 - (i - 100) * 10).try_into().unwrap(), // Falling prices
    |             +                       +++++++++++++++++++++
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
331 |             (2000 + (i % 5) * 1000).try_into().unwrap(),
    |             +                     +++++++++++++++++++++

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:489:53
    |
489 |         let mid = book.get_mid().unwrap_or(Px::from(1000000));
    |                                            -------- ^^^^^^^ expected `Px`, found integer
    |                                            |
    |                                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:556:49
    |
556 | ...                   price: Px::from(100000 + (i % 1000) as i64),
    |                              -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                              |
    |                              arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:557:53
    |
557 | ...                   quantity: Qty::from(100 + (i % 100) as i64),
    |                                 --------- ^^^^^^^^^^^^^^^^^^^^^^ expected `Qty`, found `i64`
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:558:62
    |
558 | ...                   original_quantity: Qty::from(100),
    |                                          --------- ^^^ expected `Qty`, found integer
    |                                          |
    |                                          arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/tests/unit/test_integration.rs:343:13
    |
341 |         scenario.simulate_trade_execution(
    |                  ------------------------ arguments to this method are incorrect
342 |             i,
343 |             98_000 + (i - 200) * 50, // Recovering prices
    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u64`
    |
note: method defined here
   --> services/orderbook/tests/unit/test_integration.rs:127:8
    |
127 |     fn simulate_trade_execution(&self, 
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
128 |         trade_id: u64, 
129 |         price: i64, 
    |         ----------
help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit
    |
343 |             (98_000 + (i - 200) * 50).try_into().unwrap(), // Recovering prices
    |             +                       +++++++++++++++++++++

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:559:53
    |
559 | ...                   timestamp: Ts::from(i),
    |                                  -------- ^ expected `Ts`, found `u64`
    |                                  |
    |                                  arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
559 |                                 timestamp: Ts::from(services_common::Ts(i)),
    |                                                     ++++++++++++++++++++ +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:562:83
    |
562 | ...                   visible_quantity: if i % 20 == 0 { Some(Qty::from(10)) } else { None },
    |                                                               --------- ^^ expected `Qty`, found integer
    |                                                               |
    |                                                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0599]: no variant or associated item named `Buy` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:492:109
    |
492 |         OrderBookEvent::Order(builder.order_add(1, Px::from_i64(100_000), Qty::from_i64(10_000), EventSide::Buy)),
    |                                                                                                             ^^^ variant or associated item not found in `orderbook::Side`

warning: unused variable: `sample_order`
   --> services/trading-gateway/tests/unit/risk_gate_tests.rs:139:5
    |
139 |     sample_order: TradingEvent
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sample_order`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0599]: no variant or associated item named `Sell` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:493:108
    |
493 |         OrderBookEvent::Order(builder.order_add(2, Px::from_i64(101_000), Qty::from_i64(8_000), EventSide::Sell)),
    |                                                                                                            ^^^^ variant or associated item not found in `orderbook::Side`

error[E0599]: no variant or associated item named `Sell` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:494:104
    |
494 |         OrderBookEvent::Trade(builder.trade(1, Px::from_i64(100_500), Qty::from_i64(2_000), EventSide::Sell)),
    |                                                                                                        ^^^^ variant or associated item not found in `orderbook::Side`

error[E0599]: no variant or associated item named `Buy` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:495:111
    |
495 |         OrderBookEvent::Order(builder.order_modify(1, Px::from_i64(100_000), Qty::from_i64(8_000), EventSide::Buy)),
    |                                                                                                               ^^^ variant or associated item not found in `orderbook::Side`

error[E0599]: no variant or associated item named `Sell` found for enum `orderbook::Side` in the current scope
   --> services/orderbook/tests/unit/test_integration.rs:496:89
    |
496 |         OrderBookEvent::Order(builder.order_delete(2, Px::from_i64(101_000), EventSide::Sell)),
    |                                                                                         ^^^^ variant or associated item not found in `orderbook::Side`

warning: variable `passed` is assigned to, but never used
   --> services/trading-gateway/tests/unit/risk_gate_tests.rs:405:13
    |
405 |     let mut passed = 0;
    |             ^^^^^^
    |
    = note: consider using `_passed` instead

error[E0277]: `MarketScenario` doesn't implement `std::fmt::Debug`
   --> services/orderbook/src/main.rs:631:44
    |
631 |         info!("🎮 Market Simulation: {:?}", scenario);
    |                                      ----   ^^^^^^^^ `MarketScenario` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |                                      |
    |                                      required by this formatting parameter
    |
    = help: the trait `std::fmt::Debug` is not implemented for `MarketScenario`
    = note: add `#[derive(Debug)]` to `MarketScenario` or manually `impl std::fmt::Debug for MarketScenario`
    = note: required for `&MarketScenario` to implement `std::fmt::Debug`
    = note: this error originates in the macro `$crate::__macro_support::format_args` which comes from the expansion of the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `MarketScenario` with `#[derive(Debug)]`
    |
158 + #[derive(Debug)]
159 | enum MarketScenario {
    |

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:677:42
    |
677 |                 let bid_price = Px::from(mid_price - 10 - i * 10);
    |                                 -------- ^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:678:42
    |
678 |                 let ask_price = Px::from(mid_price + 10 + i * 10);
    |                                 -------- ^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:683:41
    |
683 |                     quantity: Qty::from(1000 + i * 500),
    |                               --------- ^^^^^^^^^^^^^^ expected `Qty`, found `i64`
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:684:50
    |
684 |                     original_quantity: Qty::from(1000),
    |                                        --------- ^^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0369]: binary operation `==` cannot be applied to type `backtesting::OrderSide`
   --> services/backtesting/tests/unit/strategy_tests.rs:51:5
    |
51  |     assert_eq!(signal.side, OrderSide::Buy);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     backtesting::OrderSide
    |     backtesting::OrderSide
    |
note: the foreign item type `backtesting::OrderSide` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/backtesting/src/lib.rs:221:1
    |
221 | pub enum OrderSide {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `backtesting::OrderType`
   --> services/backtesting/tests/unit/strategy_tests.rs:52:5
    |
52  |     assert_eq!(signal.order_type, OrderType::Market);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     backtesting::OrderType
    |     backtesting::OrderType
    |
note: the foreign item type `backtesting::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/backtesting/src/lib.rs:233:1
    |
233 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:685:41
    |
685 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
685 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

error[E0369]: binary operation `==` cannot be applied to type `backtesting::OrderSide`
   --> services/backtesting/tests/unit/strategy_tests.rs:143:5
    |
143 |     assert_eq!(signal.side, OrderSide::Sell);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     backtesting::OrderSide
    |     backtesting::OrderSide
    |
note: the foreign item type `backtesting::OrderSide` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/backtesting/src/lib.rs:221:1
    |
221 | pub enum OrderSide {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `backtesting::OrderType`
   --> services/backtesting/tests/unit/strategy_tests.rs:144:5
    |
144 |     assert_eq!(signal.order_type, OrderType::Market);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     |
    |     backtesting::OrderType
    |     backtesting::OrderType
    |
note: the foreign item type `backtesting::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/backtesting/src/lib.rs:233:1
    |
233 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:695:41
    |
695 |                     quantity: Qty::from(1000 + i * 500),
    |                               --------- ^^^^^^^^^^^^^^ expected `Qty`, found `i64`
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:696:50
    |
696 |                     original_quantity: Qty::from(1000),
    |                                        --------- ^^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:697:41
    |
697 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
697 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:709:30
    |
709 |                     Px::from(mid_price + 10)
    |                     -------- ^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:711:30
    |
711 |                     Px::from(mid_price - 10)
    |                     -------- ^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:717:41
    |
717 |                     quantity: Qty::from(500),
    |                               --------- ^^^ expected `Qty`, found integer
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:718:50
    |
718 |                     original_quantity: Qty::from(500),
    |                                        --------- ^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:719:41
    |
719 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
719 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:756:38
    |
756 |                 let price = Px::from(100000 + rand::random::<i64>() % 100);
    |                             -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                             |
    |                             arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:763:41
    |
763 |                     quantity: Qty::from(100),
    |                               --------- ^^^ expected `Qty`, found integer
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:764:50
    |
764 |                     original_quantity: Qty::from(100),
    |                                        --------- ^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:765:41
    |
765 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
765 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/position_manager_tests.rs:526:27
    |
526 |             Qty::from_i64(i * 10000), 
    |             ------------- ^^^^^^^^^ expected `i64`, found `u32`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
526 |             Qty::from_i64((i * 10000).into()), 
    |                           +         ++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/position_manager_tests.rs:527:26
    |
527 |             Px::from_i64(i * 1000000000)
    |             ------------ ^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
527 |             Px::from_i64((i * 1000000000).into())
    |                          +              ++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/position_manager_tests.rs:605:31
    |
605 |                 Qty::from_i64(i * 1000),
    |                 ------------- ^^^^^^^^ expected `i64`, found `u32`
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
605 |                 Qty::from_i64((i * 1000).into()),
    |                               +        ++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/position_manager_tests.rs:606:30
    |
606 |                 Px::from_i64(i * 100000000)
    |                 ------------ ^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
606 |                 Px::from_i64((i * 100000000).into())
    |                              +             ++++++++

error[E0599]: no method named `get_order_rate` found for struct `tokio::sync::RwLockReadGuard<'_, orderbook::PerformanceMetrics>` in the current scope
   --> services/orderbook/src/main.rs:788:29
    |
788 |                     metrics.get_order_rate(),
    |                             ^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, orderbook::PerformanceMetrics>`

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:106:9
    |
106 |         assert_eq!(order_type, OrderType::Limit);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         trading_gateway::OrderType
    |         trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `market`
   --> services/backtesting/tests/test_utils/mod.rs:348:32
    |
348 |     fn generate_signals(&self, market: &MarketSnapshot, portfolio: &PortfolioState) -> Vec<TradingSignal> {
    |                                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_market`

error[E0599]: no method named `get_cancel_rate` found for struct `tokio::sync::RwLockReadGuard<'_, orderbook::PerformanceMetrics>` in the current scope
   --> services/orderbook/src/main.rs:789:29
    |
789 |                     metrics.get_cancel_rate()
    |                             ^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, orderbook::PerformanceMetrics>`

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::OrderType`
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:522:9
    |
522 |         assert_eq!(order_type, OrderType::Limit);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         trading_gateway::OrderType
    |         trading_gateway::OrderType
    |
note: the foreign item type `trading_gateway::OrderType` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:154:1
    |
154 | pub enum OrderType {
    | ^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `trading_gateway::TimeInForce`
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:526:9
    |
526 |         assert_eq!(time_in_force, trading_gateway::TimeInForce::Gtc);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         trading_gateway::TimeInForce
    |         trading_gateway::TimeInForce
    |
note: the foreign item type `trading_gateway::TimeInForce` doesn't implement `PartialEq`
   --> /home/praveen/ShrivenQuant/services/trading-gateway/src/lib.rs:171:1
    |
171 | pub enum TimeInForce {
    | ^^^^^^^^^^^^^^^^^^^^ not implement `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:547:41
    |
547 |                 bid: Some((Px::from_i64(1000000000 + i * 1000000), Qty::from_i64(10000))),
    |                            ------------ ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
547 |                 bid: Some((Px::from_i64((1000000000 + i * 1000000).into()), Qty::from_i64(10000))),
    |                                         +                        ++++++++

warning: unused variable: `i`
   --> services/orderbook/tests/unit/test_metrics.rs:431:9
    |
431 |     for i in 0..100 {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:548:41
    |
548 |                 ask: Some((Px::from_i64(1010000000 + i * 1000000), Qty::from_i64(10000))),
    |                            ------------ ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
548 |                 ask: Some((Px::from_i64((1010000000 + i * 1000000).into()), Qty::from_i64(10000))),
    |                                         +                        ++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/market_maker_tests.rs:549:35
    |
549 |                 mid: Px::from_i64(1005000000 + i * 1000000),
    |                      ------------ ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                      |
    |                      arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
549 |                 mid: Px::from_i64((1005000000 + i * 1000000).into()),
    |                                   +                        ++++++++

warning: unused variable: `timestamp`
  --> services/backtesting/tests/unit/market_data_tests.rs:17:9
   |
17 |     let timestamp = Utc::now();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`

warning: unused variable: `ohlcv`
  --> services/backtesting/tests/unit/market_data_tests.rs:18:9
   |
18 |     let ohlcv = OHLCV {
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_ohlcv`

warning: unused variable: `i`
   --> services/backtesting/tests/unit/execution_tests.rs:178:9
    |
178 |     for i in 0..10 {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> services/backtesting/tests/unit/execution_tests.rs:204:9
    |
204 |     for i in 0..5 {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/orchestrator_tests.rs:309:41
    |
309 |                 bid: Some((Px::from_i64(1000000000 + i * 1000), Qty::from_i64(10000))),
    |                            ------------ ^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
309 |                 bid: Some((Px::from_i64((1000000000 + i * 1000).into()), Qty::from_i64(10000))),
    |                                         +                     ++++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/orchestrator_tests.rs:310:41
    |
310 |                 ask: Some((Px::from_i64(1001000000 + i * 1000), Qty::from_i64(10000))),
    |                            ------------ ^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
310 |                 ask: Some((Px::from_i64((1001000000 + i * 1000).into()), Qty::from_i64(10000))),
    |                                         +                     ++++++++

warning: unused variable: `run`
   --> services/backtesting/tests/unit/execution_tests.rs:475:9
    |
475 |     for run in 0..3 {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_run`

warning: unused variable: `i`
   --> services/backtesting/tests/unit/execution_tests.rs:480:13
    |
480 |         for i in 0..20 {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/orchestrator_tests.rs:311:35
    |
311 |                 mid: Px::from_i64(1000500000 + i * 1000),
    |                      ------------ ^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `u32`
    |                      |
    |                      arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:95:18
    |
95  |     pub const fn from_i64(ticks: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `u32` to an `i64`
    |
311 |                 mid: Px::from_i64((1000500000 + i * 1000).into()),
    |                                   +                     ++++++++

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:809:42
    |
809 |                 let bid_price = Px::from(100000 - 10 * (i + 1));
    |                                 -------- ^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found integer
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:810:42
    |
810 |                 let ask_price = Px::from(100000 + 10 * (i + 1));
    |                                 -------- ^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found integer
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:815:41
    |
815 |                     quantity: Qty::from(1000),
    |                               --------- ^^^^ expected `Qty`, found integer
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:816:50
    |
816 |                     original_quantity: Qty::from(1000),
    |                                        --------- ^^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:817:41
    |
817 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
817 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:827:41
    |
827 |                     quantity: Qty::from(1000),
    |                               --------- ^^^^ expected `Qty`, found integer
    |                               |
    |                               arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/orchestrator_tests.rs:560:5
    |
560 |     assert_eq!(orchestrator.get_events_processed(), event_count);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `i64`
    |
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `value`
  --> services/backtesting/tests/unit/performance_tests.rs:53:13
   |
53 |     for (i, value) in values.iter().enumerate() {
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:828:50
    |
828 |                     original_quantity: Qty::from(1000),
    |                                        --------- ^^^^ expected `Qty`, found integer
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:162:13
    |
162 |         let value = 100_000.0 * (1.0 + 0.0004 * day as f64); // ~10% annual return
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

error[E0277]: can't compare `u64` with `i64`
   --> services/trading-gateway/tests/unit/orchestrator_tests.rs:560:5
    |
560 |     assert_eq!(orchestrator.get_events_processed(), event_count);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `u64 == i64`
    |
    = help: the trait `PartialEq<i64>` is not implemented for `u64`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              `u64` implements `PartialEq<serde_json::value::Value>`
              `u64` implements `PartialEq`
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:829:41
    |
829 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
829 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                         ++++++++++++++++++++                                 +

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:218:13
    |
218 |     for (i, value) in values.iter().enumerate() {
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:244:13
    |
244 |         let value = 100_000.0 + variation;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:842:26
    |
842 |                 Px::from(100100) // Cross the spread
    |                 -------- ^^^^^^ expected `Px`, found integer
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:844:26
    |
844 |                 Px::from(99900)
    |                 -------- ^^^^^ expected `Px`, found integer
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:336:13
    |
336 |     for (i, value) in extreme_values.iter().enumerate() {
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:385:13
    |
385 |         let value = 100_000.0 + day as f64 * 500.0; // Linear growth
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:850:37
    |
850 |                 quantity: Qty::from(2000),
    |                           --------- ^^^^ expected `Qty`, found integer
    |                           |
    |                           arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

warning: unused variable: `value`
   --> services/backtesting/tests/unit/performance_tests.rs:456:13
    |
456 |     for (i, value) in values.iter().enumerate() {
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:851:46
    |
851 |                 original_quantity: Qty::from(2000),
    |                                    --------- ^^^^ expected `Qty`, found integer
    |                                    |
    |                                    arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:852:37
    |
852 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
852 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                     ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:881:33
    |
881 |                 price: Px::from(initial_price - 10 * i),
    |                        -------- ^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                        |
    |                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:882:37
    |
882 |                 quantity: Qty::from(1000),
    |                           --------- ^^^^ expected `Qty`, found integer
    |                           |
    |                           arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:883:46
    |
883 |                 original_quantity: Qty::from(1000),
    |                                    --------- ^^^^ expected `Qty`, found integer
    |                                    |
    |                                    arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:884:37
    |
884 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
884 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                     ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:901:29
    |
901 |             price: Px::from(initial_price - 1000), // 10% below
    |                    -------- ^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                    |
    |                    arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:902:33
    |
902 |             quantity: Qty::from(100000), // Huge size
    |                       --------- ^^^^^^ expected `Qty`, found integer
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:903:42
    |
903 |             original_quantity: Qty::from(100000),
    |                                --------- ^^^^^^ expected `Qty`, found integer
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:904:33
    |
904 |             timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                        -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                        |
    |                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
904 |             timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                 ++++++++++++++++++++                                 +

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:918:33
    |
918 |                 price: Px::from(panic_price),
    |                        -------- ^^^^^^^^^^^ expected `Px`, found `i64`
    |                        |
    |                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

Some errors have detailed explanations: E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0308`.
error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:919:37
    |
919 |                 quantity: Qty::from(5000),
    |                           --------- ^^^^ expected `Qty`, found integer
    |                           |
    |                           arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:920:46
    |
920 |                 original_quantity: Qty::from(5000),
    |                                    --------- ^^^^ expected `Qty`, found integer
    |                                    |
    |                                    arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:921:37
    |
921 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
921 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                     ++++++++++++++++++++                                 +

warning: unused variable: `i`
   --> services/trading-gateway/tests/unit/strategy_tests.rs:619:9
    |
619 |     for i in 1..=25 {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: `orderbook` (test "lib") generated 9 warnings
error: could not compile `orderbook` (test "lib") due to 26 previous errors; 9 warnings emitted
error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:943:33
    |
943 |                 price: Px::from(recovery_price),
    |                        -------- ^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                        |
    |                        arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:944:37
    |
944 |                 quantity: Qty::from(2000),
    |                           --------- ^^^^ expected `Qty`, found integer
    |                           |
    |                           arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:84:23
   |
83 | #[fixture]
   | ---------- arguments to this function are incorrect
84 | async fn grpc_service(trading_gateway: Arc<TradingGateway>) -> TradingGatewayServiceImpl {
   |                       ^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
   |
note: calling an async function returns a future
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:84:23
   |
84 | async fn grpc_service(trading_gateway: Arc<TradingGateway>) -> TradingGatewayServiceImpl {
   |                       ^^^^^^^^^^^^^^^
note: associated function defined here
  --> services/trading-gateway/tests/unit/grpc_service_tests.rs:83:1
   |
83 | #[fixture]
   | ^^^^^^^^^^
84 | async fn grpc_service(trading_gateway: Arc<TradingGateway>) -> TradingGatewayServiceImpl {
   |                       ------------------------------------
   = note: this error originates in the attribute macro `fixture` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider `await`ing on the `Future`
   |
84 | async fn grpc_service(trading_gateway.await: Arc<TradingGateway>) -> TradingGatewayServiceImpl {
   |                                      ++++++

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:945:46
    |
945 |                 original_quantity: Qty::from(2000),
    |                                    --------- ^^^^ expected `Qty`, found integer
    |                                    |
    |                                    arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:946:37
    |
946 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
946 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                     ++++++++++++++++++++                                 +

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:162:17
    |
162 |                 trading_gateway::GatewayStatus::Stopped => 0,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
162 -                 trading_gateway::GatewayStatus::Stopped => 0,
162 +                 <trading_gateway as Example>::GatewayStatus::Stopped => 0,
    |

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:163:17
    |
163 |                 trading_gateway::GatewayStatus::Starting => 1,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
163 -                 trading_gateway::GatewayStatus::Starting => 1,
163 +                 <trading_gateway as Example>::GatewayStatus::Starting => 1,
    |

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:971:34
    |
971 |             let price = Px::from(99500 + rand::random::<i64>() % 1000);
    |                         -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
    |                         |
    |                         arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:164:17
    |
164 |                 trading_gateway::GatewayStatus::Running => 2,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
164 -                 trading_gateway::GatewayStatus::Running => 2,
164 +                 <trading_gateway as Example>::GatewayStatus::Running => 2,
    |

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:973:38
    |
973 |             let quantity = Qty::from(1000 + rand::random::<i64>() % 5000);
    |                            --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Qty`, found `i64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> services/orderbook/src/main.rs:982:37
    |
982 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
    |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
    |
588 |     fn from(value: T) -> Self;
    |        ^^^^
help: try wrapping the expression in `services_common::Ts`
    |
982 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
    |                                     ++++++++++++++++++++                                 +

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:165:17
    |
165 |                 trading_gateway::GatewayStatus::Stopping => 3,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
165 -                 trading_gateway::GatewayStatus::Stopping => 3,
165 +                 <trading_gateway as Example>::GatewayStatus::Stopping => 3,
    |

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:166:17
    |
166 |                 trading_gateway::GatewayStatus::Error => 4,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
166 -                 trading_gateway::GatewayStatus::Error => 4,
166 +                 <trading_gateway as Example>::GatewayStatus::Error => 4,
    |

Some errors have detailed explanations: E0369, E0382, E0433.
For more information about an error, try `rustc --explain E0369`.
error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:183:32
    |
183 |     assert_eq!(initial_status, trading_gateway::GatewayStatus::Stopped);
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
183 -     assert_eq!(initial_status, trading_gateway::GatewayStatus::Stopped);
183 +     assert_eq!(initial_status, <trading_gateway as Example>::GatewayStatus::Stopped);
    |

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1023:38
     |
1023 |             let quantity = Qty::from(5000 + rand::random::<i64>() % 10000);
     |                            --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Qty`, found `i64`
     |                            |
     |                            arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

warning: `backtesting` (test "lib") generated 26 warnings
error: could not compile `backtesting` (test "lib") due to 10 previous errors; 26 warnings emitted
error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1028:33
     |
1028 |                 price: Px::from(100000), // MOC orders at market
     |                        -------- ^^^^^^ expected `Px`, found integer
     |                        |
     |                        arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:201:24
    |
201 |     assert_eq!(status, trading_gateway::GatewayStatus::Running);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
201 -     assert_eq!(status, trading_gateway::GatewayStatus::Running);
201 +     assert_eq!(status, <trading_gateway as Example>::GatewayStatus::Running);
    |

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1031:37
     |
1031 |                 timestamp: Ts::from(start.elapsed().as_nanos() as u64),
     |                            -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
     |                            |
     |                            arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^
help: try wrapping the expression in `services_common::Ts`
     |
1031 |                 timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
     |                                     ++++++++++++++++++++                                 +

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:224:24
    |
224 |     assert_eq!(status, trading_gateway::GatewayStatus::Stopped);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
224 -     assert_eq!(status, trading_gateway::GatewayStatus::Stopped);
224 +     assert_eq!(status, <trading_gateway as Example>::GatewayStatus::Stopped);
    |

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1076:38
     |
1076 |                 let price = Px::from(100000 + (rand::random::<i64>() % levels as i64));
     |                             -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Px`, found `i64`
     |                             |
     |                             arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1082:41
     |
1082 |                     quantity: Qty::from(100),
     |                               --------- ^^^ expected `Qty`, found integer
     |                               |
     |                               arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1083:50
     |
1083 |                     original_quantity: Qty::from(100),
     |                                        --------- ^^^ expected `Qty`, found integer
     |                                        |
     |                                        arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1084:41
     |
1084 |                     timestamp: Ts::from(start.elapsed().as_nanos() as u64),
     |                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ts`, found `u64`
     |                                |
     |                                arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^
help: try wrapping the expression in `services_common::Ts`
     |
1084 |                     timestamp: Ts::from(services_common::Ts(start.elapsed().as_nanos() as u64)),
     |                                         ++++++++++++++++++++                                 +

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1088:40
     |
1088 |                         Some(Qty::from(10)) 
     |                              --------- ^^ expected `Qty`, found integer
     |                              |
     |                              arguments to this function are incorrect
     |
note: associated function defined here
    --> /home/praveen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:588:8
     |
588  |     fn from(value: T) -> Self;
     |        ^^^^

error[E0308]: mismatched types
    --> services/orderbook/src/main.rs:1106:91
     |
1106 |             if start.elapsed().as_secs() % 2 == 0 && start.elapsed().as_millis() % 1000 < interval_ms {
     |                                                      ----------------------------------   ^^^^^^^^^^^ expected `u128`, found `u64`
     |                                                      |
     |                                                      expected because this is `u128`
     |
help: you can convert a `u64` to a `u128`
     |
1106 |             if start.elapsed().as_secs() % 2 == 0 && start.elapsed().as_millis() % 1000 < interval_ms.into() {
     |                                                                                                      +++++++

error[E0223]: ambiguous associated type
   --> services/trading-gateway/tests/unit/grpc_service_tests.rs:482:24
    |
482 |     assert_eq!(status, trading_gateway::GatewayStatus::Running);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `GatewayStatus` implemented for `trading_gateway`, you could use the fully-qualified path
    |
482 -     assert_eq!(status, trading_gateway::GatewayStatus::Running);
482 +     assert_eq!(status, <trading_gateway as Example>::GatewayStatus::Running);
    |

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:118:42
    |
118 |     let risk_metrics = realistic_gateway.risk_gate.get_metrics();
    |                                          ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:119:42
    |
119 |     let exec_metrics = realistic_gateway.execution_engine.get_metrics();
    |                                          ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:120:39
    |
120 |     let telemetry = realistic_gateway.telemetry.get_stats().await;
    |                                       ^^^^^^^^^ private field

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:173:26
    |
173 |                 (round + i) % 2 == 0,
    |                          ^ expected `i64`, found `usize`

error[E0277]: cannot add `usize` to `i64`
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:173:24
    |
173 |                 (round + i) % 2 == 0,
    |                        ^ no implementation for `i64 + usize`
    |
    = help: the trait `std::ops::Add<usize>` is not implemented for `i64`
    = help: the following other types implement trait `std::ops::Add<Rhs>`:
              `&i64` implements `std::ops::Add<i64>`
              `&i64` implements `std::ops::Add`
              `i64` implements `std::ops::Add<&i64>`
              `i64` implements `std::ops::Add<zerocopy::byteorder::I64<O>>`
              `i64` implements `std::ops::Add`

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:187:39
    |
187 |     let positions = realistic_gateway.position_manager.get_all_positions().await;
    |                                       ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:188:44
    |
188 |     let position_count = realistic_gateway.position_manager.get_position_count().await;
    |                                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:194:39
    |
194 |     let telemetry = realistic_gateway.telemetry.get_stats().await;
    |                                       ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:240:42
    |
240 |     let risk_metrics = realistic_gateway.risk_gate.get_metrics();
    |                                          ^^^^^^^^^ private field

warning: `backtesting` (test "mod") generated 26 warnings (26 duplicates)
error: could not compile `backtesting` (test "mod") due to 10 previous errors; 26 warnings emitted
warning: unused variable: `initial_price`
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:272:9
    |
272 |     let initial_price = 5000000000i64; // $500
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_initial_price`

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:440:39
    |
440 |     let telemetry = realistic_gateway.telemetry.get_stats().await;
    |                                       ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:441:42
    |
441 |     let risk_metrics = realistic_gateway.risk_gate.get_metrics();
    |                                          ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:442:42
    |
442 |     let exec_metrics = realistic_gateway.execution_engine.get_metrics();
    |                                          ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:481:23
    |
481 |     realistic_gateway.position_manager.update_position(
    |                       ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:489:38
    |
489 |     let position = realistic_gateway.position_manager.get_position(symbol).await;
    |                                      ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:497:23
    |
497 |     realistic_gateway.position_manager.update_position(
    |                       ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:505:46
    |
505 |     let updated_position = realistic_gateway.position_manager.get_position(symbol).await.unwrap();
    |                                              ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:513:23
    |
513 |     realistic_gateway.position_manager.update_market_price(
    |                       ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:518:44
    |
518 |     let final_position = realistic_gateway.position_manager.get_position(symbol).await.unwrap();
    |                                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:522:23
    |
522 |     realistic_gateway.position_manager.update_position(
    |                       ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:529:45
    |
529 |     let closed_position = realistic_gateway.position_manager.get_position(symbol).await.unwrap();
    |                                             ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:534:64
    |
534 |     let (total_unrealized, total_realized) = realistic_gateway.position_manager.get_total_pnl().await;
    |                                                                ^^^^^^^^^^^^^^^^ private field

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:583:30
    |
583 |                     (round + i + j) % 2 == 0,
    |                              ^ expected `i64`, found `usize`

error[E0277]: cannot add `usize` to `i64`
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:583:28
    |
583 |                     (round + i + j) % 2 == 0,
    |                            ^ no implementation for `i64 + usize`
    |
    = help: the trait `std::ops::Add<usize>` is not implemented for `i64`
    = help: the following other types implement trait `std::ops::Add<Rhs>`:
              `&i64` implements `std::ops::Add<i64>`
              `&i64` implements `std::ops::Add`
              `i64` implements `std::ops::Add<&i64>`
              `i64` implements `std::ops::Add<zerocopy::byteorder::I64<O>>`
              `i64` implements `std::ops::Add`

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:600:39
    |
600 |     let telemetry = realistic_gateway.telemetry.get_stats().await;
    |                                       ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:601:42
    |
601 |     let risk_metrics = realistic_gateway.risk_gate.get_metrics();
    |                                          ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:602:42
    |
602 |     let exec_metrics = realistic_gateway.execution_engine.get_metrics();
    |                                          ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:113:46
    |
113 |     let telemetry = high_performance_gateway.telemetry.get_stats().await;
    |                                              ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:114:49
    |
114 |     let risk_metrics = high_performance_gateway.risk_gate.get_metrics();
    |                                                 ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:176:28
    |
176 |                 if gateway.execution_engine.submit_order(order).await.is_ok() {
    |                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:207:49
    |
207 |     let exec_metrics = high_performance_gateway.execution_engine.get_metrics();
    |                                                 ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:208:49
    |
208 |     let risk_metrics = high_performance_gateway.risk_gate.get_metrics();
    |                                                 ^^^^^^^^^ private field

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:262:35
    |
262 |                     Qty::from_i64(5000 + (round * level) % 20000),
    |                     ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `usize`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit
    |
262 |                     Qty::from_i64((5000 + (round * level) % 20000).try_into().unwrap()),
    |                                   +                              +++++++++++++++++++++

error[E0560]: struct `ReplayConfig` has no field named `enforce_ordering`
   --> services/orderbook/src/main.rs:189:17
    |
189 |                 enforce_ordering: true,
    |                 ^^^^^^^^^^^^^^^^ `ReplayConfig` does not have this field
    |
    = note: available fields are: `max_sequence_gap`, `buffer_size`, `snapshot_interval`, `track_latency`

error[E0560]: struct `ReplayConfig` has no field named `measure_latency`
   --> services/orderbook/src/main.rs:190:17
    |
190 |                 measure_latency: true,
    |                 ^^^^^^^^^^^^^^^ `ReplayConfig` does not have this field
    |
    = note: available fields are: `max_sequence_gap`, `buffer_size`, `snapshot_interval`, `track_latency`

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:267:35
    |
267 |                     Qty::from_i64(4000 + (round * level) % 18000),
    |                     ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `usize`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit
    |
267 |                     Qty::from_i64((4000 + (round * level) % 18000).try_into().unwrap()),
    |                                   +                              +++++++++++++++++++++

error[E0277]: the trait bound `std::string::String: From<ReplayConfig>` is not satisfied
   --> services/orderbook/src/main.rs:192:45
    |
192 |             Some(Arc::new(ReplayEngine::new(config)))
    |                           ----------------- ^^^^^^ the trait `From<ReplayConfig>` is not implemented for `std::string::String`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&cookie_store::cookie_domain::CookieDomain>`
              `std::string::String` implements `From<&cookie_store::cookie_path::CookiePath>`
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements `From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Str>`
            and 12 others
    = note: required for `ReplayConfig` to implement `Into<std::string::String>`
note: required by a bound in `ReplayEngine::new`
   --> /home/praveen/ShrivenQuant/services/orderbook/src/replay.rs:69:29
    |
69  |     pub fn new(symbol: impl Into<String>, config: ReplayConfig) -> Self {
    |                             ^^^^^^^^^^^^ required by this bound in `ReplayEngine::new`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> services/orderbook/src/main.rs:192:27
    |
192 |             Some(Arc::new(ReplayEngine::new(config)))
    |                           ^^^^^^^^^^^^^^^^^-------- argument #2 of type `ReplayConfig` is missing
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/orderbook/src/replay.rs:69:12
    |
69  |     pub fn new(symbol: impl Into<String>, config: ReplayConfig) -> Self {
    |            ^^^
help: provide the argument
    |
192 |             Some(Arc::new(ReplayEngine::new(config, /* ReplayConfig */)))
    |                                                   ++++++++++++++++++++

error[E0308]: arguments to this method are incorrect
   --> services/trading-gateway/tests/performance/stress_tests.rs:272:23
    |
260 |                   bid_levels.push((
    |  _________________----------______-
    | |                 |
    | |                 ... which causes `bid_levels` to have type `Vec<(services_common::Px, services_common::Qty, usize)>`
261 | |                     Px::from_i64(current_price - (level as i64 * 1000)),
262 | |                     Qty::from_i64(5000 + (round * level) % 20000),
263 | |                     level,
264 | |                 ));
    | |_________________- this argument has type `(services_common::Px, services_common::Qty, usize)`...
265 |                   ask_levels.push((
    |  _________________----------______-
    | |                 |
    | |                 ... which causes `ask_levels` to have type `Vec<(services_common::Px, services_common::Qty, usize)>`
266 | |                     Px::from_i64(current_price + (level as i64 * 1000)),
267 | |                     Qty::from_i64(4000 + (round * level) % 18000),
268 | |                     level,
269 | |                 ));
    | |_________________- this argument has type `(services_common::Px, services_common::Qty, usize)`...
...
272 |               orderbook.load_snapshot(bid_levels, ask_levels);
    |                         ^^^^^^^^^^^^^
    |
note: expected `Vec<(Px, Qty, u64)>`, found `Vec<(Px, Qty, usize)>`
   --> services/trading-gateway/tests/performance/stress_tests.rs:272:37
    |
272 |             orderbook.load_snapshot(bid_levels, ask_levels);
    |                                     ^^^^^^^^^^
    = note: expected struct `Vec<(services_common::Px, services_common::Qty, u64)>`
               found struct `Vec<(services_common::Px, services_common::Qty, usize)>`
note: expected `Vec<(Px, Qty, u64)>`, found `Vec<(Px, Qty, usize)>`
   --> services/trading-gateway/tests/performance/stress_tests.rs:272:49
    |
272 |             orderbook.load_snapshot(bid_levels, ask_levels);
    |                                                 ^^^^^^^^^^
    = note: expected struct `Vec<(services_common::Px, services_common::Qty, u64)>`
               found struct `Vec<(services_common::Px, services_common::Qty, usize)>`
note: method defined here
   --> /home/praveen/ShrivenQuant/services/orderbook/src/core.rs:458:12
    |
458 |     pub fn load_snapshot(&self, bid_levels: Vec<(Px, Qty, u64)>, ask_levels: Vec<(Px, Qty, u64)>) {
    |            ^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:278:35
    |
278 |                     Qty::from_i64(1000 + (round * (j + 1)) % 5000),
    |                     ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `usize`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/praveen/ShrivenQuant/services/common/src/types/types.rs:202:18
    |
202 |     pub const fn from_i64(units: i64) -> Self {
    |                  ^^^^^^^^
help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit
    |
278 |                     Qty::from_i64((1000 + (round * (j + 1)) % 5000).try_into().unwrap()),
    |                                   +                               +++++++++++++++++++++

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:288:42
    |
288 |                 high_performance_gateway.position_manager.update_position(
    |                                          ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:312:46
    |
312 |     let telemetry = high_performance_gateway.telemetry.get_stats().await;
    |                                              ^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:313:51
    |
313 |     let position_count = high_performance_gateway.position_manager.get_position_count().await;
    |                                                   ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:314:49
    |
314 |     let risk_metrics = high_performance_gateway.risk_gate.get_metrics();
    |                                                 ^^^^^^^^^ private field

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:353:42
    |
353 |         let current_price = base_price + price_noise;
    |                                          ^^^^^^^^^^^ expected `i64`, found `usize`

error[E0277]: cannot add `usize` to `i64`
   --> services/trading-gateway/tests/performance/stress_tests.rs:353:40
    |
353 |         let current_price = base_price + price_noise;
    |                                        ^ no implementation for `i64 + usize`
    |
    = help: the trait `std::ops::Add<usize>` is not implemented for `i64`
    = help: the following other types implement trait `std::ops::Add<Rhs>`:
              `&i64` implements `std::ops::Add<i64>`
              `&i64` implements `std::ops::Add`
              `i64` implements `std::ops::Add<&i64>`
              `i64` implements `std::ops::Add<zerocopy::byteorder::I64<O>>`
              `i64` implements `std::ops::Add`

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:398:49
    |
398 |     let risk_metrics = high_performance_gateway.risk_gate.get_metrics();
    |                                                 ^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:468:50
    |
468 |                 let _ = high_performance_gateway.position_manager.update_position(
    |                                                  ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:485:46
    |
485 |     let telemetry = high_performance_gateway.telemetry.get_stats().await;
    |                                              ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:486:49
    |
486 |     let risk_metrics = high_performance_gateway.risk_gate.get_metrics();
    |                                                 ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:487:49
    |
487 |     let exec_metrics = high_performance_gateway.execution_engine.get_metrics();
    |                                                 ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:488:51
    |
488 |     let position_count = high_performance_gateway.position_manager.get_position_count().await;
    |                                                   ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:489:67
    |
489 |     let (unrealized_pnl, realized_pnl) = high_performance_gateway.position_manager.get_total_pnl().await;
    |                                                                   ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:557:50
    |
557 |                 let _ = high_performance_gateway.execution_engine.submit_order(order).await;
    |                                                  ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/performance/stress_tests.rs:572:52
    |
572 |     let final_telemetry = high_performance_gateway.telemetry.get_stats().await;
    |                                                    ^^^^^^^^^ private field

error[E0308]: mismatched types
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:64:41
   |
64 | async fn test_execution_engine_creation(execution_engine: ExecutionEngine) {
   |          ------------------------------ ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
   |          |
   |          arguments to this function are incorrect
   |
note: calling an async function returns a future
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:64:41
   |
64 | async fn test_execution_engine_creation(execution_engine: ExecutionEngine) {
   |                                         ^^^^^^^^^^^^^^^^
note: function defined here
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:64:10
   |
64 | async fn test_execution_engine_creation(execution_engine: ExecutionEngine) {
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
   |
64 | async fn test_execution_engine_creation(execution_engine.await: ExecutionEngine) {
   |                                                         ++++++

error[E0308]: mismatched types
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:78:5
   |
77 | async fn test_market_order_submission(
   |          ---------------------------- arguments to this function are incorrect
78 |     execution_engine: ExecutionEngine,
   |     ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
   |
note: calling an async function returns a future
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:78:5
   |
78 |     execution_engine: ExecutionEngine,
   |     ^^^^^^^^^^^^^^^^
note: function defined here
  --> services/trading-gateway/tests/unit/execution_engine_tests.rs:77:10
   |
77 | async fn test_market_order_submission(
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |     execution_engine: ExecutionEngine,
   |     ---------------------------------
help: consider `await`ing on the `Future`
   |
78 |     execution_engine.await: ExecutionEngine,
   |                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:108:5
    |
107 | async fn test_limit_order_submission(
    |          --------------------------- arguments to this function are incorrect
108 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:108:5
    |
108 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:107:10
    |
107 | async fn test_limit_order_submission(
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
108 |     execution_engine: ExecutionEngine,
    |     ---------------------------------
help: consider `await`ing on the `Future`
    |
108 |     execution_engine.await: ExecutionEngine,
    |                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:128:37
    |
128 | async fn test_twap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |          -------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:128:37
    |
128 | async fn test_twap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |                                     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:128:10
    |
128 | async fn test_twap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
128 | async fn test_twap_order_submission(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:155:37
    |
155 | async fn test_vwap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |          -------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:155:37
    |
155 | async fn test_vwap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |                                     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:155:10
    |
155 | async fn test_vwap_order_submission(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
155 | async fn test_vwap_order_submission(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:182:5
    |
181 | async fn test_order_cancellation(
    |          ----------------------- arguments to this function are incorrect
182 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:182:5
    |
182 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:181:10
    |
181 | async fn test_order_cancellation(
    |          ^^^^^^^^^^^^^^^^^^^^^^^
182 |     execution_engine: ExecutionEngine,
    |     ---------------------------------
help: consider `await`ing on the `Future`
    |
182 |     execution_engine.await: ExecutionEngine,
    |                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:215:40
    |
215 | async fn test_cancel_nonexistent_order(execution_engine: ExecutionEngine) -> Result<()> {
    |          ----------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:215:40
    |
215 | async fn test_cancel_nonexistent_order(execution_engine: ExecutionEngine) -> Result<()> {
    |                                        ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:215:10
    |
215 | async fn test_cancel_nonexistent_order(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
215 | async fn test_cancel_nonexistent_order(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                        ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:228:33
    |
228 | async fn test_cancel_all_orders(execution_engine: ExecutionEngine) -> Result<()> {
    |          ---------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:228:33
    |
228 | async fn test_cancel_all_orders(execution_engine: ExecutionEngine) -> Result<()> {
    |                                 ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:228:10
    |
228 | async fn test_cancel_all_orders(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
228 | async fn test_cancel_all_orders(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                 ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:289:5
    |
288 | async fn test_order_state_tracking(
    |          ------------------------- arguments to this function are incorrect
289 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:289:5
    |
289 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:288:10
    |
288 | async fn test_order_state_tracking(
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^
289 |     execution_engine: ExecutionEngine,
    |     ---------------------------------
help: consider `await`ing on the `Future`
    |
289 |     execution_engine.await: ExecutionEngine,
    |                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:308:43
    |
308 | async fn test_get_active_orders_filtering(execution_engine: ExecutionEngine) -> Result<()> {
    |          -------------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:308:43
    |
308 | async fn test_get_active_orders_filtering(execution_engine: ExecutionEngine) -> Result<()> {
    |                                           ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:308:10
    |
308 | async fn test_get_active_orders_filtering(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
308 | async fn test_get_active_orders_filtering(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                           ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:352:32
    |
352 | async fn test_metrics_accuracy(execution_engine: ExecutionEngine) -> Result<()> {
    |          --------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:352:32
    |
352 | async fn test_metrics_accuracy(execution_engine: ExecutionEngine) -> Result<()> {
    |                                ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:352:10
    |
352 | async fn test_metrics_accuracy(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
352 | async fn test_metrics_accuracy(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:433:43
    |
433 | async fn test_performance_characteristics(execution_engine: ExecutionEngine) -> Result<()> {
    |          -------------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:433:43
    |
433 | async fn test_performance_characteristics(execution_engine: ExecutionEngine) -> Result<()> {
    |                                           ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:433:10
    |
433 | async fn test_performance_characteristics(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
433 | async fn test_performance_characteristics(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                           ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:471:35
    |
471 | async fn test_order_id_generation(execution_engine: ExecutionEngine) -> Result<()> {
    |          ------------------------ ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:471:35
    |
471 | async fn test_order_id_generation(execution_engine: ExecutionEngine) -> Result<()> {
    |                                   ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:471:10
    |
471 | async fn test_order_id_generation(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
471 | async fn test_order_id_generation(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                   ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:507:38
    |
507 | async fn test_invalid_order_handling(execution_engine: ExecutionEngine) -> Result<()> {
    |          --------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:507:38
    |
507 | async fn test_invalid_order_handling(execution_engine: ExecutionEngine) -> Result<()> {
    |                                      ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:507:10
    |
507 | async fn test_invalid_order_handling(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
507 | async fn test_invalid_order_handling(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                      ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:540:5
    |
539 | async fn test_order_types_parameterized(
    |          ------------------------------ arguments to this function are incorrect
540 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:540:5
    |
540 |     execution_engine: ExecutionEngine,
    |     ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:539:10
    |
539 | async fn test_order_types_parameterized(
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
540 |     execution_engine: ExecutionEngine,
    |     ---------------------------------
help: consider `await`ing on the `Future`
    |
540 |     execution_engine.await: ExecutionEngine,
    |                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:576:39
    |
576 | async fn test_order_update_processing(execution_engine: ExecutionEngine) -> Result<()> {
    |          ---------------------------- ^^^^^^^^^^^^^^^^ expected `ExecutionEngine`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:576:39
    |
576 | async fn test_order_update_processing(execution_engine: ExecutionEngine) -> Result<()> {
    |                                       ^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/unit/execution_engine_tests.rs:576:10
    |
576 | async fn test_order_update_processing(execution_engine: ExecutionEngine) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------
help: consider `await`ing on the `Future`
    |
576 | async fn test_order_update_processing(execution_engine.await: ExecutionEngine) -> Result<()> {
    |                                                       ++++++

warning: unused variable: `asks`
    --> services/orderbook/src/main.rs:1143:63
     |
1143 |     fn check_spoofing_pattern(&self, bids: &[(Px, Qty, u64)], asks: &[(Px, Qty, u64)]) -> (bool, f64) {
     |                                                               ^^^^ help: if this is intentional, prefix it with an underscore: `_asks`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `asks`
    --> services/orderbook/src/main.rs:1160:63
     |
1160 |     fn check_layering_pattern(&self, bids: &[(Px, Qty, u64)], asks: &[(Px, Qty, u64)]) -> (bool, f64) {
     |                                                               ^^^^ help: if this is intentional, prefix it with an underscore: `_asks`

warning: unused variable: `book`
    --> services/orderbook/src/main.rs:1178:36
     |
1178 |     fn check_quote_stuffing(&self, book: &OrderBook) -> (bool, f64) {
     |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_book`

warning: unused variable: `book`
    --> services/orderbook/src/main.rs:1195:39
     |
1195 |     fn check_wash_trading_risk(&self, book: &OrderBook) -> (bool, f64) {
     |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_book`

warning: unused variable: `manager`
    --> services/orderbook/src/main.rs:1302:17
     |
1302 |             let manager = OrderBookManager::new(replay);
     |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_manager`

warning: unused variable: `manager`
    --> services/orderbook/src/main.rs:1319:17
     |
1319 |             let manager = OrderBookManager::new(false);
     |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_manager`

error[E0308]: mismatched types
  --> services/trading-gateway/tests/integration/end_to_end_tests.rs:72:41
   |
72 | async fn test_complete_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
   |          ------------------------------ ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
   |          |
   |          arguments to this function are incorrect
   |
note: calling an async function returns a future
  --> services/trading-gateway/tests/integration/end_to_end_tests.rs:72:41
   |
72 | async fn test_complete_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
   |                                         ^^^^^^^^^^^^^^^^^
note: function defined here
  --> services/trading-gateway/tests/integration/end_to_end_tests.rs:72:10
   |
72 | async fn test_complete_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
   |
72 | async fn test_complete_trading_workflow(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
   |                                                          ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:142:45
    |
142 | async fn test_multi_symbol_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ---------------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:142:45
    |
142 | async fn test_multi_symbol_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                             ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:142:10
    |
142 | async fn test_multi_symbol_trading_workflow(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
142 | async fn test_multi_symbol_trading_workflow(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                              ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:204:43
    |
204 | async fn test_risk_management_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          -------------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:204:43
    |
204 | async fn test_risk_management_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                           ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:204:10
    |
204 | async fn test_risk_management_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
204 | async fn test_risk_management_integration(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                            ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:262:43
    |
262 | async fn test_circuit_breaker_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          -------------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:262:43
    |
262 | async fn test_circuit_breaker_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                           ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:262:10
    |
262 | async fn test_circuit_breaker_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
262 | async fn test_circuit_breaker_integration(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                            ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:331:49
    |
331 | async fn test_strategy_coordination_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          -------------------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:331:49
    |
331 | async fn test_strategy_coordination_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                                 ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:331:10
    |
331 | async fn test_strategy_coordination_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
331 | async fn test_strategy_coordination_integration(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                                  ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:471:46
    |
471 | async fn test_position_lifecycle_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ----------------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:471:46
    |
471 | async fn test_position_lifecycle_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                              ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:471:10
    |
471 | async fn test_position_lifecycle_integration(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
471 | async fn test_position_lifecycle_integration(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                               ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:550:38
    |
550 | async fn test_performance_under_load(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          --------------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:550:38
    |
550 | async fn test_performance_under_load(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                      ^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/integration/end_to_end_tests.rs:550:10
    |
550 | async fn test_performance_under_load(realistic_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------
help: consider `await`ing on the `Future`
    |
550 | async fn test_performance_under_load(realistic_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                       ++++++

error[E0308]: mismatched types
  --> services/trading-gateway/tests/performance/stress_tests.rs:42:49
   |
42 | async fn test_high_frequency_market_data_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
   |          -------------------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
   |          |
   |          arguments to this function are incorrect
   |
note: calling an async function returns a future
  --> services/trading-gateway/tests/performance/stress_tests.rs:42:49
   |
42 | async fn test_high_frequency_market_data_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
  --> services/trading-gateway/tests/performance/stress_tests.rs:42:10
   |
42 | async fn test_high_frequency_market_data_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
   |
42 | async fn test_high_frequency_market_data_stress(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
   |                                                                         ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:136:50
    |
136 | async fn test_concurrent_order_processing_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          --------------------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/performance/stress_tests.rs:136:50
    |
136 | async fn test_concurrent_order_processing_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/performance/stress_tests.rs:136:10
    |
136 | async fn test_concurrent_order_processing_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
    |
136 | async fn test_concurrent_order_processing_stress(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                                          ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:231:39
    |
231 | async fn test_memory_usage_under_load(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ---------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/performance/stress_tests.rs:231:39
    |
231 | async fn test_memory_usage_under_load(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/performance/stress_tests.rs:231:10
    |
231 | async fn test_memory_usage_under_load(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
    |
231 | async fn test_memory_usage_under_load(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                               ++++++

Some errors have detailed explanations: E0061, E0277, E0308, E0560, E0599.
For more information about an error, try `rustc --explain E0061`.
error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:334:39
    |
334 | async fn test_latency_characteristics(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ---------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/performance/stress_tests.rs:334:39
    |
334 | async fn test_latency_characteristics(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/performance/stress_tests.rs:334:10
    |
334 | async fn test_latency_characteristics(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
    |
334 | async fn test_latency_characteristics(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                               ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:417:45
    |
417 | async fn test_system_stability_long_running(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ---------------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/performance/stress_tests.rs:417:45
    |
417 | async fn test_system_stability_long_running(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/performance/stress_tests.rs:417:10
    |
417 | async fn test_system_stability_long_running(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
    |
417 | async fn test_system_stability_long_running(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                                     ++++++

error[E0308]: mismatched types
   --> services/trading-gateway/tests/performance/stress_tests.rs:518:39
    |
518 | async fn test_resource_cleanup_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ---------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<TradingGateway>`, found future
    |          |
    |          arguments to this function are incorrect
    |
note: calling an async function returns a future
   --> services/trading-gateway/tests/performance/stress_tests.rs:518:39
    |
518 | async fn test_resource_cleanup_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> services/trading-gateway/tests/performance/stress_tests.rs:518:10
    |
518 | async fn test_resource_cleanup_stress(high_performance_gateway: Arc<TradingGateway>) -> Result<()> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------
help: consider `await`ing on the `Future`
    |
518 | async fn test_resource_cleanup_stress(high_performance_gateway.await: Arc<TradingGateway>) -> Result<()> {
    |                                                               ++++++

warning: `orderbook` (bin "orderbook" test) generated 8 warnings
error: could not compile `orderbook` (bin "orderbook" test) due to 74 previous errors; 8 warnings emitted
error[E0277]: `trading_gateway::GatewayStatus` is not a future
  --> services/trading-gateway/tests/integration_test.rs:27:39
   |
27 |     let status = gateway.get_status().await;
   |                                       ^^^^^ `trading_gateway::GatewayStatus` is not a future
   |
   = help: the trait `std::future::Future` is not implemented for `trading_gateway::GatewayStatus`
   = note: trading_gateway::GatewayStatus must be a future or must implement `IntoFuture` to be awaited
   = note: required for `trading_gateway::GatewayStatus` to implement `IntoFuture`
help: remove the `.await`
   |
27 -     let status = gateway.get_status().await;
27 +     let status = gateway.get_status();
   |

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
  --> services/trading-gateway/tests/integration_test.rs:88:26
   |
88 |     let passed = gateway.risk_gate.check_order(&order).await?;
   |                          ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:104:26
    |
104 |     let passed = gateway.risk_gate.check_order(&large_order).await?;
    |                          ^^^^^^^^^ private field

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:107:27
    |
107 |     let metrics = gateway.risk_gate.get_metrics();
    |                           ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:132:13
    |
132 |     gateway.execution_engine.submit_order(order).await?;
    |             ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:137:27
    |
137 |     let metrics = gateway.execution_engine.get_metrics();
    |                           ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:141:31
    |
141 |     let order_state = gateway.execution_engine.get_order(1);
    |                               ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `strategies` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:208:34
    |
208 |         let strategies = gateway.strategies.read();
    |                                  ^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:227:13
    |
227 |     gateway.position_manager.update_position(
    |             ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:234:28
    |
234 |     let position = gateway.position_manager.get_position(symbol).await;
    |                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:242:13
    |
242 |     gateway.position_manager.update_market_price(
    |             ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:247:28
    |
247 |     let position = gateway.position_manager.get_position(symbol).await.unwrap();
    |                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:251:13
    |
251 |     gateway.position_manager.update_position(
    |             ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `position_manager` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:258:28
    |
258 |     let position = gateway.position_manager.get_position(symbol).await.unwrap();
    |                            ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `signal_aggregator` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:293:31
    |
293 |     let aggregated1 = gateway.signal_aggregator.aggregate(signal1).await?;
    |                               ^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `signal_aggregator` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:296:31
    |
296 |     let aggregated2 = gateway.signal_aggregator.aggregate(signal2).await?;
    |                               ^^^^^^^^^^^^^^^^^ private field

error[E0277]: `trading_gateway::GatewayStatus` is not a future
   --> services/trading-gateway/tests/integration_test.rs:356:39
    |
356 |     let status = gateway.get_status().await;
    |                                       ^^^^^ `trading_gateway::GatewayStatus` is not a future
    |
    = help: the trait `std::future::Future` is not implemented for `trading_gateway::GatewayStatus`
    = note: trading_gateway::GatewayStatus must be a future or must implement `IntoFuture` to be awaited
    = note: required for `trading_gateway::GatewayStatus` to implement `IntoFuture`
help: remove the `.await`
    |
356 -     let status = gateway.get_status().await;
356 +     let status = gateway.get_status();
    |

error[E0616]: field `risk_gate` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:361:32
    |
361 |     let risk_metrics = gateway.risk_gate.get_metrics();
    |                                ^^^^^^^^^ private field

error[E0616]: field `execution_engine` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:362:32
    |
362 |     let exec_metrics = gateway.execution_engine.get_metrics();
    |                                ^^^^^^^^^^^^^^^^ private field

error[E0616]: field `telemetry` of struct `trading_gateway::TradingGateway` is private
   --> services/trading-gateway/tests/integration_test.rs:363:29
    |
363 |     let telemetry = gateway.telemetry.get_stats().await;
    |                             ^^^^^^^^^ private field

warning: unused variable: `order`
   --> services/trading-gateway/tests/integration_test.rs:161:9
    |
161 |     let order = TradingEvent::OrderRequest {
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_order`

Some errors have detailed explanations: E0223, E0277, E0308, E0369, E0616, E0659.
For more information about an error, try `rustc --explain E0223`.
warning: `trading-gateway` (test "integration_test") generated 15 warnings
error: could not compile `trading-gateway` (test "integration_test") due to 144 previous errors; 15 warnings emitted
