name: ShrivenQ Strict CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  strict-check:
    name: Strict Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check for forbidden patterns
      run: |
        echo "Checking for TODO, FIXME, HACK, XXX, STUB..."
        ! grep -r "TODO\|FIXME\|HACK\|XXX\|STUB" --include="*.rs" --exclude-dir=target .
        
        echo "Checking for unwrap(), expect(), panic!..."
        ! grep -r "unwrap()\|expect(\|panic!\|unimplemented!\|unreachable!" --include="*.rs" --exclude-dir=target .
        
        echo "Checking for println!, dbg!..."
        ! grep -r "println!\|print!\|eprintln!\|eprint!\|dbg!" --include="*.rs" --exclude-dir=target .
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run strict clippy
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -D clippy::nursery \
          -D clippy::cargo \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::unimplemented \
          -D clippy::todo \
          -D clippy::dbg_macro \
          -D clippy::print_stdout \
          -D clippy::print_stderr \
          -D dead_code \
          -D unused
    
    - name: Build with strict flags
      run: cargo build --all-targets --all-features
      env:
        RUSTFLAGS: "-D warnings -D dead_code -D unused"
    
    - name: Run tests
      run: cargo test --all-targets --all-features
    
    - name: Check documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"
    
    - name: Security audit
      run: |
        cargo install cargo-audit
        cargo audit

  performance-check:
    name: Performance Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Build release mode
      run: cargo build --release --all-targets
    
    - name: Check binary size
      run: |
        ls -lh target/release/shrivenq
        SIZE=$(stat -c%s target/release/shrivenq)
        if [ $SIZE -gt 10485760 ]; then
          echo "Binary too large: $SIZE bytes (>10MB)"
          exit 1
        fi